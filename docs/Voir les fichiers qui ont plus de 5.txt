Voir les fichiers qui ont plus de 500 lignes

find ./src -name "*.ts" -type f | while read file; do
    count=$(grep -Ev '^\s*(//|/\*|\*|\*/|$)' "$file" | wc -l);
    [ "$count" -gt 500 ] && printf "%-50s â†’ %5d lignes\n" "$file" "$count";
done | sort -nrk3

Voir les erreurs de typescript
npx tsc --noEmit --Watch

Voir les erreurs de Eslint
npm run lint

unimported (spÃ©cial fichiers inutilisÃ©s) ğŸ”¥ğŸ”¥ğŸ”¥ (trÃ¨s recommandÃ© !)
unimported est trÃ¨s efficace pour trouver tous les fichiers inutilisÃ©s.
npx unimported


 ts-prune (pour TypeScript) ğŸ”¥ (recommandÃ©)
Un excellent outil qui dÃ©tecte les exports inutilisÃ©s en TypeScript.
npx ts-prune


depcheck (JavaScript/TypeScript) ğŸ”¥ (utile)
VÃ©rifie les dÃ©pendances et fichiers inutilisÃ©s.
npx depcheck

madge (visualisation et analyse) ğŸ“ˆ
madge analyse les dÃ©pendances de tes modules. Il permet de gÃ©nÃ©rer des graphiques visuels trÃ¨s utiles.
npx madge --orphans ./src


 gÃ©nÃ¨re une image avec les dÃ©pendances visuelles.)
npx madge --extensions ts,tsx --exclude='(test|spec)\.tsx?' --image deps.png ./src


Commande pour lister les fichiers "orphelins" uniquement :
npx madge --orphans --extensions ts,tsx ./src

GÃ©nÃ©rer un rapport HTML interactif:
npx depcruise --include-only "^src" --output-type html ./src > dependencies.html

