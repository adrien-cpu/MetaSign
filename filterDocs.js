import fs from "fs";
import { execSync } from "child_process";

// üìÇ D√©finition des dossiers
const sourceDir = "./src";
const docsDir = "./docs";
const missingReportPath = `${docsDir}/missing_jsdoc_report.txt`;
const jsDocReportPath = `${docsDir}/jsdoc_files_report.txt`;

// üìÇ Cr√©er le dossier `docs/` s'il n'existe pas
if (!fs.existsSync(docsDir)) {
    fs.mkdirSync(docsDir, { recursive: true });
}

function isValidTypeScript(filePath) {
    try {
        execSync(`npx tsc --noEmit --skipLibCheck ${filePath}`, { stdio: "pipe" });
        return true;
    } catch {
        return false;
    }
}


// üîç Fonction pour v√©rifier si un fichier contient un commentaire JSDoc
function containsJsDoc(filePath) {
    const content = fs.readFileSync(filePath, "utf8");
    return /\/\*\*[\s\S]+?\*\//.test(content); // V√©rifie s'il y a un vrai commentaire JSDoc
}

// üìÇ Scanner tous les fichiers JS/TS
const files = execSync(`find ${sourceDir} -type f \\( -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" \\)`)
    .toString()
    .trim()
    .split("\n");

console.log(`üìÇ ${files.length} fichiers trouv√©s`);

const jsDocFiles = [];
const missingJsDocFiles = [];

files.forEach(file => {
    if (containsJsDoc(file) && isValidTypeScript(file)) {
        jsDocFiles.push(file);
    } else {
        missingJsDocFiles.push(file);
    }
});


// üìã Enregistrement des fichiers AVEC JSDoc
if (jsDocFiles.length > 0) {
    fs.writeFileSync(jsDocReportPath, jsDocFiles.join("\n"));
    console.log(`‚úÖ Rapport des fichiers AVEC JSDoc g√©n√©r√© : ${jsDocReportPath} (${jsDocFiles.length} fichiers document√©s)`);
} else {
    console.log("‚ö†Ô∏è Aucun fichier avec JSDoc d√©tect√©, rapport non g√©n√©r√©.");
}

// üìã Enregistrement des fichiers SANS JSDoc
if (missingJsDocFiles.length > 0) {
    fs.writeFileSync(missingReportPath, missingJsDocFiles.join("\n"));
    console.log(`üìã Rapport des fichiers SANS JSDoc g√©n√©r√© : ${missingReportPath} (${missingJsDocFiles.length} fichiers sans documentation)`);
} else {
    console.log("‚úÖ Tous les fichiers ont des JSDoc !");
}

// üìñ G√©n√©rer la documentation uniquement pour les fichiers bien document√©s
if (jsDocFiles.length > 0) {
    console.log("üîç V√©rification des fichiers avec JSDoc :", jsDocFiles);

    try {
        execSync(`npx typedoc --entryPointStrategy expand --entryPoints ${jsDocFiles.join(" ")} --out ${docsDir}`, { stdio: "inherit" });
        console.log(`‚úÖ Documentation g√©n√©r√©e avec succ√®s dans ${docsDir}/`);
    } catch (error) {
        console.error(`‚ùå Erreur lors de la g√©n√©ration de la documentation : ${error.message}`);
    }
} else {
    console.log("‚ö†Ô∏è Aucun fichier avec JSDoc trouv√©. Documentation non g√©n√©r√©e.");
}
