import { prisma } from "@/lib/prisma";
import { NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/app/api/auth/[...nextauth]/authOptions";

export async function POST(req: Request, { params }: { params: { id: string } }) {
    const session = await getServerSession(authOptions);
    if (!session) return NextResponse.json({ error: "Non autoris√©" }, { status: 403 });

    const userId = session.user.id;
    const clubId = params.id;

    try {
        // V√©rifier si l'utilisateur est d√©j√† membre
        const existingMembership = await prisma.clubMembership.findUnique({
            where: { userId_clubId: { userId, clubId } },
        });

        if (existingMembership) {
            // ‚ùå L'utilisateur est d√©j√† membre ‚Üí on le supprime (d√©sinscription)
            await prisma.clubMembership.delete({
                where: { id: existingMembership.id },
            });
            console.log("üëã D√©sinscription du club :", clubId);
            return NextResponse.json({ message: "D√©sinscription r√©ussie", action: "left" });
        } else {
            // ‚úÖ L'utilisateur n'est pas membre ‚Üí on l'ajoute (inscription)
            await prisma.clubMembership.create({
                data: { userId, clubId },
            });
            console.log("‚úÖ Inscription au club :", clubId);
            return NextResponse.json({ message: "Inscription r√©ussie", action: "joined" });
        }
    } catch (error) {
        console.error("üö® Erreur API d'inscription au club :", error);
        return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
    }
}
