/**
 * @file src/ai/services/learning/types/BadgeTypes.ts
 * @description Types pour le syst√®me de badges - Interface Badge corrig√©e
 * 
 * Fonctionnalit√©s :
 * - üéØ Interface Badge compl√®te avec toutes les propri√©t√©s n√©cessaires
 * - üîß Compatible exactOptionalPropertyTypes: true
 * - üìä Types pour √©valuation et statistiques
 * - üåü Configuration syst√®me de badges
 * 
 * @module BadgeTypes
 * @version 1.0.0 - Types Badge corrig√©s
 * @since 2025
 * @author MetaSign Team - Badge System Types
 * @lastModified 2025-07-06
 */

/**
 * Cat√©gories de badges disponibles
 */
export type BadgeCategory = 'progression' | 'completion' | 'achievement' | 'consistency';

/**
 * Niveaux de difficult√© pour les badges
 */
export type BadgeDifficulty = 'easy' | 'medium' | 'hard' | 'legendary';

/**
 * Interface principale pour un badge (toutes les propri√©t√©s n√©cessaires)
 */
export interface Badge {
    /** Identifiant unique du badge */
    readonly id: string;

    /** Nom du badge (legacy, utiliser title) */
    readonly name: string;

    /** Titre affich√© du badge */
    readonly title: string;

    /** Description d√©taill√©e du badge */
    readonly description: string;

    /** URL de l'image du badge */
    readonly imageUrl: string;

    /** Crit√®res d'obtention (texte descriptif) */
    readonly criteria: string;

    /** Nom du fichier d'ic√¥ne */
    readonly icon: string;

    /** Points accord√©s lors de l'obtention */
    readonly pointsReward: number;

    /** Niveau de difficult√© */
    readonly difficulty: BadgeDifficulty;

    /** Cat√©gorie du badge */
    readonly category: BadgeCategory;

    /** Date de cr√©ation (optionnelle) */
    readonly createdAt?: Date;

    /** M√©tadonn√©es additionnelles (optionnelles) */
    readonly metadata?: Readonly<Record<string, unknown>>;
}

/**
 * Interface √©tendue pour les badges avec informations additionnelles
 */
export interface ExtendedBadge extends Badge {
    /** Nombre d'utilisateurs ayant obtenu ce badge */
    readonly earnedCount?: number;

    /** Pourcentage d'utilisateurs ayant obtenu ce badge */
    readonly earnedPercentage?: number;

    /** Date de premi√®re obtention */
    readonly firstEarnedAt?: Date;

    /** Date de derni√®re obtention */
    readonly lastEarnedAt?: Date;

    /** Statistiques d'obtention par p√©riode */
    readonly earnedStats?: Readonly<Record<string, number>>;
}

/**
 * R√©sultat de l'√©valuation d'un badge
 */
export interface BadgeEvaluationResult {
    /** Identifiant du badge √©valu√© */
    readonly badgeId: string;

    /** Indique si le badge a √©t√© attribu√© */
    readonly awarded: boolean;

    /** Raison de l'attribution ou du refus */
    readonly reason: string;

    /** Progression vers l'obtention (0-100) */
    readonly progressTowards: number;

    /** Crit√®res manquants (optionnel) */
    readonly missingCriteria?: readonly string[];

    /** Prochaine √©tape recommand√©e (optionnel) */
    readonly nextStep?: string;
}

/**
 * Configuration du syst√®me de badges
 */
export interface BadgeSystemConfig {
    /** Active l'attribution automatique */
    readonly enableAutoAward?: boolean;

    /** Active les badges par d√©faut */
    readonly enableDefaultBadges?: boolean;

    /** Limite quotidienne d'attribution */
    readonly dailyBadgeLimit?: number;

    /** D√©lai minimum entre attributions (ms) */
    readonly minTimeBetweenAwards?: number;

    /** Active les notifications d'attribution */
    readonly enableNotifications?: boolean;

    /** Configuration des cat√©gories actives */
    readonly enabledCategories?: readonly BadgeCategory[];

    /** Configuration des difficult√©s actives */
    readonly enabledDifficulties?: readonly BadgeDifficulty[];
}

/**
 * Progression d'apprentissage utilisateur (interface simplifi√©e pour badges)
 */
export interface LearningProgress {
    /** Identifiant utilisateur */
    readonly userId: string;

    /** Niveau actuel */
    readonly level: number;

    /** Exp√©rience totale */
    readonly totalExperience: number;

    /** Modules compl√©t√©s */
    readonly completedModules: readonly string[];

    /** Badges obtenus */
    readonly earnedBadges: readonly string[];

    /** Tentatives de quiz par module */
    readonly quizAttempts: Record<string, readonly QuizAttempt[]>;

    /** Historique des interactions */
    readonly interactionHistory: readonly InteractionRecord[];

    /** Statistiques de performance */
    readonly performanceStats?: PerformanceStats;
}

/**
 * Tentative de quiz
 */
export interface QuizAttempt {
    /** Identifiant de la tentative */
    readonly id: string;

    /** Score obtenu (0-100) */
    readonly score: number;

    /** Nombre de r√©ponses correctes */
    readonly correctAnswers: number;

    /** Nombre total de questions */
    readonly totalQuestions: number;

    /** Temps pass√© en millisecondes */
    readonly timeSpent: number;

    /** Date de la tentative */
    readonly completedAt: Date;
}

/**
 * Enregistrement d'interaction
 */
export interface InteractionRecord {
    /** Identifiant de l'interaction */
    readonly id: string;

    /** Type d'interaction */
    readonly type: string;

    /** Module ou contenu concern√© */
    readonly contentId: string;

    /** Dur√©e de l'interaction (ms) */
    readonly duration: number;

    /** Timestamp de l'interaction */
    readonly timestamp: Date;

    /** Succ√®s de l'interaction */
    readonly success: boolean;
}

/**
 * Statistiques de performance
 */
export interface PerformanceStats {
    /** Score moyen */
    readonly averageScore: number;

    /** Temps moyen par exercice */
    readonly averageTime: number;

    /** Taux de r√©ussite global */
    readonly successRate: number;

    /** S√©rie d'√©tude actuelle (jours) */
    readonly currentStreak: number;

    /** Plus longue s√©rie d'√©tude */
    readonly longestStreak: number;

    /** Derni√®re activit√© */
    readonly lastActivity: Date;
}

/**
 * Crit√®res d'√©valuation personnalis√©s pour les badges
 */
export interface CustomBadgeCriteria {
    /** Type de crit√®re */
    readonly type: 'progression' | 'completion' | 'achievement' | 'consistency' | 'custom';

    /** Valeur seuil √† atteindre */
    readonly threshold: number;

    /** Fonction d'√©valuation personnalis√©e (optionnelle) */
    readonly evaluator?: (progress: LearningProgress) => boolean;

    /** Description du crit√®re */
    readonly description?: string;

    /** Unit√© de mesure */
    readonly unit?: string;
}

/**
 * Statistiques des badges
 */
export interface BadgeStatistics {
    /** Nombre total de badges */
    readonly totalBadges: number;

    /** Badges par cat√©gorie */
    readonly badgesByCategory: Readonly<Record<BadgeCategory, number>>;

    /** Badges par difficult√© */
    readonly badgesByDifficulty: Readonly<Record<BadgeDifficulty, number>>;

    /** Taux d'obtention moyen */
    readonly averageEarnRate: number;

    /** Badge le plus obtenu */
    readonly mostEarnedBadge?: Badge;

    /** Badge le plus rare */
    readonly rarestBadge?: Badge;
}

/**
 * √âv√©nement d'attribution de badge
 */
export interface BadgeAwardEvent {
    /** Identifiant de l'√©v√©nement */
    readonly id: string;

    /** Identifiant utilisateur */
    readonly userId: string;

    /** Badge attribu√© */
    readonly badge: Badge;

    /** Timestamp de l'attribution */
    readonly awardedAt: Date;

    /** Contexte de l'attribution */
    readonly context?: Readonly<Record<string, unknown>>;

    /** Source de l'attribution */
    readonly source: 'automatic' | 'manual' | 'system';
}

/**
 * Factory functions pour cr√©er des badges
 */
export const BadgeFactory = {
    /**
     * Cr√©e un badge de progression
     */
    createProgressionBadge(
        id: string,
        title: string,
        description: string,
        level: number,
        difficulty: BadgeDifficulty = 'easy'
    ): Badge {
        return {
            id,
            name: title,
            title,
            description,
            imageUrl: `/badges/progression/${id}.png`,
            criteria: `Atteindre le niveau ${level}`,
            icon: `${id}.png`,
            pointsReward: level * 100,
            difficulty,
            category: 'progression'
        };
    },

    /**
     * Cr√©e un badge de compl√©tion
     */
    createCompletionBadge(
        id: string,
        title: string,
        description: string,
        moduleCount: number,
        difficulty: BadgeDifficulty = 'medium'
    ): Badge {
        return {
            id,
            name: title,
            title,
            description,
            imageUrl: `/badges/completion/${id}.png`,
            criteria: `Compl√©ter ${moduleCount} modules`,
            icon: `${id}.png`,
            pointsReward: moduleCount * 50,
            difficulty,
            category: 'completion'
        };
    },

    /**
     * Cr√©e un badge de r√©alisation
     */
    createAchievementBadge(
        id: string,
        title: string,
        description: string,
        criteria: string,
        points: number,
        difficulty: BadgeDifficulty = 'hard'
    ): Badge {
        return {
            id,
            name: title,
            title,
            description,
            imageUrl: `/badges/achievement/${id}.png`,
            criteria,
            icon: `${id}.png`,
            pointsReward: points,
            difficulty,
            category: 'achievement'
        };
    },

    /**
     * Cr√©e un badge de r√©gularit√©
     */
    createConsistencyBadge(
        id: string,
        title: string,
        description: string,
        streakDays: number,
        difficulty: BadgeDifficulty = 'medium'
    ): Badge {
        return {
            id,
            name: title,
            title,
            description,
            imageUrl: `/badges/consistency/${id}.png`,
            criteria: `Maintenir une s√©rie de ${streakDays} jours`,
            icon: `${id}.png`,
            pointsReward: streakDays * 10,
            difficulty,
            category: 'consistency'
        };
    }
};

/**
 * Utilitaires pour les badges
 */
export const BadgeUtils = {
    /**
     * Valide la structure d'un badge
     */
    validateBadge(badge: Badge): { isValid: boolean; errors: string[] } {
        const errors: string[] = [];

        if (!badge.id?.trim()) {
            errors.push('Un badge doit avoir un identifiant unique non vide');
        }

        if (!badge.title?.trim()) {
            errors.push('Un badge doit avoir un titre non vide');
        }

        if (!badge.description?.trim()) {
            errors.push('Un badge doit avoir une description non vide');
        }

        const validCategories: readonly BadgeCategory[] = ['progression', 'completion', 'achievement', 'consistency'];
        if (!validCategories.includes(badge.category)) {
            errors.push(`Cat√©gorie de badge invalide: ${badge.category}`);
        }

        const validDifficulties: readonly BadgeDifficulty[] = ['easy', 'medium', 'hard', 'legendary'];
        if (!validDifficulties.includes(badge.difficulty)) {
            errors.push(`Difficult√© de badge invalide: ${badge.difficulty}`);
        }

        return {
            isValid: errors.length === 0,
            errors
        };
    },

    /**
     * Calcule le score d'un badge bas√© sur sa raret√©
     */
    calculateRarityScore(badge: ExtendedBadge): number {
        if (!badge.earnedPercentage) return 1;

        // Plus le badge est rare, plus le score est √©lev√©
        return Math.max(0.1, 1 - (badge.earnedPercentage / 100));
    },

    /**
     * D√©termine si un badge est rare
     */
    isRareBadge(badge: ExtendedBadge, threshold: number = 0.05): boolean {
        return (badge.earnedPercentage || 0) < threshold * 100;
    },

    /**
     * Groupe les badges par propri√©t√©
     */
    groupBadgesByProperty<K extends keyof Badge>(
        badges: readonly Badge[],
        property: K
    ): Record<string, Badge[]> {
        return badges.reduce((acc, badge) => {
            const key = String(badge[property]);
            if (!acc[key]) {
                acc[key] = [];
            }
            acc[key].push(badge);
            return acc;
        }, {} as Record<string, Badge[]>);
    }
};

/**
 * Constantes pour le syst√®me de badges
 */
export const BADGE_CONSTANTS = {
    /** Cat√©gories de badges */
    CATEGORIES: ['progression', 'completion', 'achievement', 'consistency'] as const,

    /** Niveaux de difficult√© */
    DIFFICULTIES: ['easy', 'medium', 'hard', 'legendary'] as const,

    /** Points par difficult√© */
    POINTS_BY_DIFFICULTY: {
        easy: 100,
        medium: 250,
        hard: 500,
        legendary: 1000
    } as const,

    /** Couleurs par cat√©gorie */
    CATEGORY_COLORS: {
        progression: '#3B82F6',
        completion: '#10B981',
        achievement: '#F59E0B',
        consistency: '#8B5CF6'
    } as const,

    /** Configuration par d√©faut */
    DEFAULT_CONFIG: {
        enableAutoAward: true,
        enableDefaultBadges: true,
        dailyBadgeLimit: 5,
        minTimeBetweenAwards: 60000, // 1 minute
        enableNotifications: true,
        enabledCategories: ['progression', 'completion', 'achievement', 'consistency'] as const,
        enabledDifficulties: ['easy', 'medium', 'hard', 'legendary'] as const
    } as const
} as const;