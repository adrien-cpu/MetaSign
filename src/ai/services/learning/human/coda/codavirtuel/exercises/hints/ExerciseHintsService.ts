/**
 * @file src/ai/services/learning/human/coda/codavirtuel/exercises/hints/ExerciseHintsService.ts
 * @description Service de gestion des indices pour les exercices
 * G√©n√®re des indices adapt√©s au type d'exercice et au niveau de l'apprenant
 * Compatible avec exactOptionalPropertyTypes: true et optimis√©
 * @author MetaSign Learning Team
 * @version 3.0.2
 * @since 2025
 * @lastModified 2025-07-22
 */

import { LoggerFactory } from '@/ai/utils/LoggerFactory';
import type {
    CECRLLevel,
    SupportedExerciseType
} from '../types/ExerciseGeneratorTypes';

/**
 * Type pour les niveaux de difficult√© d'exercice
 */
export type ExerciseDifficulty = 'easy' | 'medium' | 'hard';

/**
 * Interface pour les r√©ponses d'exercices
 */
export interface ExerciseResponse {
    readonly correctAnswer?: unknown;
    readonly expectedValue?: string;
    readonly metadata?: Readonly<Record<string, unknown>>;
}

/**
 * Interface pour les g√©n√©rateurs d'indices sp√©cifiques par type d'exercice
 */
interface IHintGenerator {
    /**
     * G√©n√®re des indices sp√©cifiques √† un type d'exercice
     * @param level - Niveau CECRL de l'apprenant
     * @param expectedResponse - R√©ponse attendue √† l'exercice (optionnel)
     * @returns Liste d'indices contextuels
     */
    generateSpecificHints(level: CECRLLevel, expectedResponse?: ExerciseResponse): readonly string[];
}

/**
 * Configuration pour le service d'indices
 */
interface HintsServiceConfig {
    readonly enableLevelAdaptation?: boolean;
    readonly maxHintsPerExercise?: number;
    readonly enableContextualHints?: boolean;
}

/**
 * Service responsable de la g√©n√©ration d'indices contextuels et p√©dagogiques
 * pour aider les apprenants dans leurs exercices de LSF
 * 
 * @class ExerciseHintsService
 * @description Fournit des indices adaptatifs selon le type d'exercice, le niveau CECRL
 * et la difficult√© pour optimiser l'apprentissage de la LSF
 * 
 * @example
 * ```typescript
 * const hintsService = new ExerciseHintsService();
 * const hints = hintsService.generateHints(
 *   'MultipleChoice',
 *   'A1',
 *   'easy',
 *   { correctAnswer: 2 }
 * );
 * ```
 */
export class ExerciseHintsService {
    /**
     * Logger pour le service
     * @private
     * @readonly
     */
    private readonly logger = LoggerFactory.getLogger('ExerciseHintsService');

    /**
     * G√©n√©rateurs d'indices sp√©cialis√©s par type d'exercice
     * @private
     * @readonly
     */
    private readonly hintGenerators = new Map<SupportedExerciseType, IHintGenerator>();

    /**
     * Configuration du service
     * @private
     * @readonly
     */
    private readonly config: Required<HintsServiceConfig>;

    /**
     * Version du service
     * @private
     * @static
     * @readonly
     */
    private static readonly SERVICE_VERSION = '3.0.2';

    /**
     * Initialise le service de gestion des indices
     * 
     * @constructor
     * @param {HintsServiceConfig} config - Configuration optionnelle du service
     */
    constructor(config: HintsServiceConfig = {}) {
        this.config = {
            enableLevelAdaptation: config.enableLevelAdaptation ?? true,
            maxHintsPerExercise: config.maxHintsPerExercise ?? 5,
            enableContextualHints: config.enableContextualHints ?? true
        };

        this.registerDefaultHintGenerators();

        this.logger.info('üéØ ExerciseHintsService initialis√©', {
            version: ExerciseHintsService.SERVICE_VERSION,
            config: this.config
        });
    }

    /**
     * G√©n√®re des indices pour un exercice
     * 
     * @method generateHints
     * @param {SupportedExerciseType} type - Type d'exercice
     * @param {CECRLLevel} level - Niveau CECRL de l'apprenant
     * @param {ExerciseDifficulty} difficulty - Difficult√© de l'exercice
     * @param {ExerciseResponse} expectedResponse - R√©ponse attendue
     * @returns {readonly string[]} Liste d'indices
     * @public
     */
    public generateHints(
        type: SupportedExerciseType,
        level: CECRLLevel,
        difficulty: ExerciseDifficulty,
        expectedResponse: ExerciseResponse = {}
    ): readonly string[] {
        this.logger.debug('üí° G√©n√©ration d\'indices', {
            type,
            level,
            difficulty,
            hasExpectedResponse: Object.keys(expectedResponse).length > 0
        });

        try {
            // Nombre d'indices selon la difficult√©
            const hintsCount = this.determineHintsCount(difficulty, level);

            if (hintsCount === 0) {
                this.logger.debug('Aucun indice g√©n√©r√© pour ce niveau de difficult√©');
                return [];
            }

            // Indices sp√©cifiques au type d'exercice
            const availableHints = this.getHintsByExerciseType(type, level, expectedResponse);

            // S√©lectionner al√©atoirement des indices
            const selectedHints = this.selectRandomHints(availableHints, hintsCount);

            this.logger.debug('‚úÖ Indices g√©n√©r√©s avec succ√®s', {
                type,
                level,
                difficulty,
                selectedCount: selectedHints.length,
                availableCount: availableHints.length
            });

            return selectedHints;

        } catch (error) {
            this.logger.error('‚ùå Erreur lors de la g√©n√©ration d\'indices', {
                type,
                level,
                difficulty,
                error: error instanceof Error ? error.message : String(error)
            });

            // Fallback avec indices g√©n√©riques
            return this.getFallbackHints();
        }
    }

    /**
     * Enregistre un g√©n√©rateur d'indices personnalis√© pour un type d'exercice
     * 
     * @method registerHintGenerator
     * @param {SupportedExerciseType} type - Type d'exercice
     * @param {IHintGenerator} generator - G√©n√©rateur d'indices sp√©cifique
     * @public
     */
    public registerHintGenerator(type: SupportedExerciseType, generator: IHintGenerator): void {
        this.hintGenerators.set(type, generator);
        this.logger.debug('üîß G√©n√©rateur d\'indices enregistr√©', { type });
    }

    /**
     * Obtient les statistiques du service
     * 
     * @method getServiceStats
     * @returns {object} Statistiques du service
     * @public
     */
    public getServiceStats(): {
        readonly version: string;
        readonly registeredGenerators: number;
        readonly supportedTypes: readonly SupportedExerciseType[];
        readonly config: Required<HintsServiceConfig>;
    } {
        return {
            version: ExerciseHintsService.SERVICE_VERSION,
            registeredGenerators: this.hintGenerators.size,
            supportedTypes: Array.from(this.hintGenerators.keys()),
            config: this.config
        };
    }

    // ================== M√âTHODES PRIV√âES ==================

    /**
     * D√©termine le nombre d'indices √† fournir selon la difficult√© et le niveau
     * @param difficulty - Difficult√© de l'exercice
     * @param level - Niveau CECRL de l'apprenant
     * @returns Nombre d'indices √† g√©n√©rer
     * @private
     */
    private determineHintsCount(difficulty: ExerciseDifficulty, level: CECRLLevel): number {
        // Nombre de base d'indices selon la difficult√©
        const baseCount: Record<ExerciseDifficulty, number> = {
            'easy': 3,
            'medium': 2,
            'hard': 1
        };

        if (!this.config.enableLevelAdaptation) {
            return Math.min(baseCount[difficulty] || 1, this.config.maxHintsPerExercise);
        }

        // Facteur d'ajustement selon le niveau CECRL
        const levelFactor: Record<CECRLLevel, number> = {
            'A1': 1.5,  // 50% d'indices suppl√©mentaires
            'A2': 1.2,  // 20% d'indices suppl√©mentaires
            'B1': 1.0,  // standard
            'B2': 0.8,  // 20% moins d'indices
            'C1': 0.6,  // 40% moins d'indices
            'C2': 0.4   // 60% moins d'indices
        };

        // Calcul ajust√©
        const adjustedCount = Math.round((baseCount[difficulty] || 1) * (levelFactor[level] || 1.0));
        const finalCount = Math.max(0, Math.min(adjustedCount, this.config.maxHintsPerExercise));

        this.logger.debug('üìä Calcul du nombre d\'indices', {
            difficulty,
            level,
            baseCount: baseCount[difficulty],
            levelFactor: levelFactor[level],
            adjustedCount,
            finalCount
        });

        return finalCount;
    }

    /**
     * Obtient les indices disponibles par type d'exercice
     * @param type - Type d'exercice
     * @param level - Niveau CECRL de l'apprenant
     * @param expectedResponse - R√©ponse attendue pour contextualiser les indices
     * @returns Liste d'indices disponibles
     * @private
     */
    private getHintsByExerciseType(
        type: SupportedExerciseType,
        level: CECRLLevel,
        expectedResponse: ExerciseResponse
    ): readonly string[] {
        // V√©rifier si un g√©n√©rateur d'indices sp√©cifique est disponible
        const specificGenerator = this.hintGenerators.get(type);
        if (specificGenerator) {
            try {
                const specificHints = specificGenerator.generateSpecificHints(level, expectedResponse);
                if (specificHints.length > 0) {
                    this.logger.debug('üìã Utilisation du g√©n√©rateur sp√©cifique', { type, hintsCount: specificHints.length });
                    return specificHints;
                }
            } catch (error) {
                this.logger.warn('‚ö†Ô∏è Erreur dans le g√©n√©rateur sp√©cifique, utilisation des indices g√©n√©riques', {
                    type,
                    error: error instanceof Error ? error.message : String(error)
                });
            }
        }

        // Indices g√©n√©riques selon le type d'exercice
        const genericHints = this.getGenericHints(type);

        // Indices sp√©cifiques au niveau si activ√©s
        const levelSpecificHints = this.config.enableLevelAdaptation
            ? this.getLevelSpecificHints(level)
            : [];

        // Combiner les indices
        const combinedHints = [...genericHints, ...levelSpecificHints];

        this.logger.debug('üìã Combinaison d\'indices', {
            type,
            level,
            genericCount: genericHints.length,
            levelSpecificCount: levelSpecificHints.length,
            totalCount: combinedHints.length
        });

        return combinedHints;
    }

    /**
     * S√©lectionne al√©atoirement des indices parmi les disponibles
     * @param availableHints - Indices disponibles
     * @param count - Nombre d'indices √† s√©lectionner
     * @returns Indices s√©lectionn√©s
     * @private
     */
    private selectRandomHints(availableHints: readonly string[], count: number): readonly string[] {
        if (availableHints.length === 0) {
            return [];
        }

        const selectedHints: string[] = [];
        const availableHintsCopy = [...availableHints];

        for (let i = 0; i < count && availableHintsCopy.length > 0; i++) {
            const randomIndex = Math.floor(Math.random() * availableHintsCopy.length);
            selectedHints.push(availableHintsCopy[randomIndex]);
            availableHintsCopy.splice(randomIndex, 1);
        }

        return selectedHints;
    }

    /**
     * Obtient des indices g√©n√©riques pour chaque type d'exercice
     * @param type - Type d'exercice
     * @returns Liste d'indices g√©n√©riques
     * @private
     */
    private getGenericHints(type: SupportedExerciseType): readonly string[] {
        // Indices g√©n√©riques par type d'exercice
        const genericHintsByType: Partial<Record<SupportedExerciseType, readonly string[]>> = {
            'MultipleChoice': [
                'Concentrez-vous sur les mots cl√©s de chaque option',
                '√âliminez d\'abord les options clairement incorrectes',
                'Recherchez la coh√©rence avec le contexte',
                'V√©rifiez les nuances grammaticales dans les options',
                'Observez les indices visuels dans la question'
            ],
            'DragDrop': [
                'Identifiez d\'abord les √©l√©ments de d√©but et de fin',
                'Recherchez des indices chronologiques ou logiques',
                'Organisez par ordre de complexit√© ou d\'importance',
                'Regroupez les √©l√©ments qui partagent des caract√©ristiques',
                'Visualisez l\'espace de signation pour organiser votre r√©ponse'
            ],
            'FillBlank': [
                'Analysez le contexte autour de chaque espace',
                'V√©rifiez la concordance grammaticale',
                'Consid√©rez le sens global du texte',
                'Pensez aux expressions idiomatiques de la LSF',
                'Rappelez-vous des structures sp√©cifiques au niveau demand√©'
            ],
            'TextEntry': [
                'Structurez votre r√©ponse avec une introduction et une conclusion',
                'Utilisez un vocabulaire pr√©cis et vari√©',
                'Appuyez votre r√©ponse sur des exemples concrets',
                'Adaptez votre style au contexte demand√©',
                'Pensez aux marqueurs culturels appropri√©s'
            ],
            'VideoResponse': [
                'Pr√©parez mentalement votre discours avant d\'enregistrer',
                'Utilisez l\'espace de signation de mani√®re coh√©rente',
                'Adaptez votre expression faciale au contenu',
                'Variez les configurations manuelles selon le contexte',
                'Utilisez les transferts personnels et situationnels quand appropri√©'
            ],
            'SigningPractice': [
                'Observez attentivement la formation des signes',
                'Pratiquez les mouvements lentement puis acc√©l√©rez',
                'V√©rifiez votre position des mains et des doigts',
                'Synchronisez vos expressions faciales avec les signes',
                'Utilisez l\'espace de signation de mani√®re appropri√©e'
            ]
        };

        return genericHintsByType[type] || this.getFallbackHints();
    }

    /**
     * Obtient des indices sp√©cifiques au niveau CECRL
     * @param level - Niveau CECRL de l'apprenant
     * @returns Liste d'indices adapt√©s au niveau
     * @private
     */
    private getLevelSpecificHints(level: CECRLLevel): readonly string[] {
        const levelSpecificHints: Record<CECRLLevel, readonly string[]> = {
            'A1': [
                'Concentrez-vous sur le vocabulaire de base',
                'Utilisez des structures simples',
                'Gardez vos expressions visuelles claires'
            ],
            'A2': [
                'Pensez aux expressions courantes',
                'Liez vos id√©es simplement',
                'Utilisez l\'espace de signation de fa√ßon basique'
            ],
            'B1': [
                'Exprimez votre opinion avec des structures appropri√©es',
                'Diversifiez votre vocabulaire',
                'Utilisez des transferts simples'
            ],
            'B2': [
                'Nuancez votre expression',
                'Utilisez des structures complexes',
                'Int√©grez des expressions idiomatiques'
            ],
            'C1': [
                'Argumentez avec pr√©cision',
                'Utilisez des m√©taphores visuelles',
                'Ma√Ætrisez les aspects culturels de la LSF'
            ],
            'C2': [
                'Adaptez votre registre de langue',
                'Utilisez des formes d\'expression cr√©atives',
                'Int√©grez subtilement des r√©f√©rences culturelles'
            ]
        };

        return levelSpecificHints[level] || [];
    }

    /**
     * Obtient des indices de fallback en cas d'erreur
     * @returns Indices g√©n√©riques de base
     * @private
     */
    private getFallbackHints(): readonly string[] {
        return [
            'Lisez attentivement les instructions',
            'Prenez votre temps pour comprendre la question',
            'Relisez votre r√©ponse avant de la soumettre',
            'Utilisez votre connaissance du contexte LSF'
        ];
    }

    /**
     * Enregistre les g√©n√©rateurs d'indices par d√©faut
     * @private
     */
    private registerDefaultHintGenerators(): void {
        // G√©n√©rateur pour exercices √† choix multiples
        this.registerHintGenerator('MultipleChoice', {
            generateSpecificHints: (level: CECRLLevel, expectedResponse?: ExerciseResponse): readonly string[] => {
                const specificHints: string[] = [];

                // Adaptation selon le niveau
                if (level === 'A1' || level === 'A2') {
                    specificHints.push('Recherchez les mots cl√©s familiers dans chaque option');
                } else if (level === 'B1' || level === 'B2') {
                    specificHints.push('Analysez les subtilit√©s grammaticales entre les options');
                } else {
                    specificHints.push('√âvaluez les nuances culturelles et idiomatiques des options');
                }

                // Indice contextuel bas√© sur la r√©ponse attendue (si fournie)
                if (this.config.enableContextualHints && expectedResponse?.correctAnswer !== undefined) {
                    const correctAnswer = expectedResponse.correctAnswer as number;
                    if (typeof correctAnswer === 'number') {
                        if (correctAnswer === 0) {
                            specificHints.push('Parfois, la premi√®re impression est la bonne');
                        } else if (correctAnswer >= 3) {
                            specificHints.push('N\'√©cartez pas trop vite les derni√®res options');
                        } else {
                            specificHints.push('La r√©ponse n\'est pas toujours aux extr√©mit√©s');
                        }
                    }
                }

                return specificHints;
            }
        });

        // G√©n√©rateur pour exercices de glisser-d√©poser
        this.registerHintGenerator('DragDrop', {
            generateSpecificHints: (level: CECRLLevel): readonly string[] => {
                const specificHints: string[] = [];

                if (level === 'A1' || level === 'A2') {
                    specificHints.push('Commencez par les associations les plus √©videntes');
                } else {
                    specificHints.push('Analysez les relations logiques entre les √©l√©ments');
                }

                specificHints.push('Utilisez le processus d\'√©limination pour les derni√®res associations');

                return specificHints;
            }
        });

        this.logger.info('üîß G√©n√©rateurs d\'indices par d√©faut enregistr√©s', {
            count: this.hintGenerators.size
        });
    }
}