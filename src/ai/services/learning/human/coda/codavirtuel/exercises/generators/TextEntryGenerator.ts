/**
 * @file src/ai/services/learning/human/coda/codavirtuel/exercises/generators/TextEntryGenerator.ts
 * @description G√©n√©rateur d'exercices de type r√©ponse textuelle
 * Compatible avec exactOptionalPropertyTypes: true et optimis√©
 * @author MetaSign Learning Team
 * @version 3.0.2
 * @since 2025
 * @lastModified 2025-07-22
 */

import { LoggerFactory } from '@/ai/utils/LoggerFactory';
import type {
    Exercise,
    CECRLLevel,
    SupportedExerciseType
} from '../types/ExerciseGeneratorTypes';
import { BaseExerciseGenerator } from './BaseExerciseGenerator';
import { ConceptsDataService, type LSFConcept, type LSFConceptDetails } from '../services/ConceptsDataService';

/**
 * Interface pour le contenu sp√©cifique aux exercices de saisie de texte
 */
export interface TextEntryExerciseContent {
    readonly videoUrl: string;
    readonly questionText: string;
    readonly acceptableAnswers: readonly string[];
    readonly showVisualHint?: boolean;
    readonly requireDetailedAnswer?: boolean;
    readonly answerSimilarityThreshold: number;
}

/**
 * Interface pour le contexte de g√©n√©ration d'exercices
 */
interface ExerciseGenerationContext {
    readonly conceptId: string;
    readonly difficultyLevel?: number;
    readonly currentSkillLevel?: number;
    readonly timeLimit?: number;
    readonly includeHints?: boolean;
    readonly userId?: string;
    readonly metadata?: Readonly<Record<string, unknown>>;
}

/**
 * Interface √©tendue pour l'exercice avec propri√©t√©s suppl√©mentaires
 */
interface ExtendedExercise extends Exercise<TextEntryExerciseContent> {
    readonly conceptId: string;
    readonly difficulty: number;
    readonly instructions: string;
    readonly timeLimit: number;
    readonly hints: readonly string[];
    readonly skillsTargeted: readonly string[];
}

/**
 * Type pour les niveaux de difficult√©
 */
type DifficultyLevel = 'beginner' | 'easy' | 'medium' | 'hard' | 'expert';

/**
 * Classe sp√©cialis√©e dans la g√©n√©ration d'exercices de type r√©ponse textuelle
 * 
 * @class TextEntryGenerator
 * @extends BaseExerciseGenerator
 * @description G√©n√®re des exercices o√π l'utilisateur doit saisir une r√©ponse textuelle
 * 
 * @example
 * ```typescript
 * const generator = new TextEntryGenerator();
 * const exercise = await generator.generateExercise({
 *   conceptId: 'greetings',
 *   difficultyLevel: 0.5,
 *   includeHints: true
 * });
 * ```
 */
export class TextEntryGenerator extends BaseExerciseGenerator {
    /**
     * Logger pour le g√©n√©rateur
     * @private
     * @readonly
     */
    private readonly logger = LoggerFactory.getLogger('TextEntryGenerator');

    /**
     * Service de gestion des concepts
     * @private
     * @readonly
     */
    private readonly conceptsService: ConceptsDataService;

    /**
     * Version du g√©n√©rateur
     * @private
     * @static
     * @readonly
     */
    private static readonly GENERATOR_VERSION = '3.0.2';

    /**
     * Limites de temps par d√©faut selon la difficult√©
     * @private
     * @static
     * @readonly
     */
    private static readonly DEFAULT_TIME_LIMITS: Record<string, number> = {
        'beginner': 600,  // 10 minutes
        'easy': 480,      // 8 minutes
        'medium': 360,    // 6 minutes
        'hard': 240,      // 4 minutes
        'expert': 180     // 3 minutes
    } as const;

    /**
     * Constructeur du g√©n√©rateur
     * 
     * @constructor
     */
    constructor() {
        super();
        this.conceptsService = ConceptsDataService.getInstance();

        this.logger.info('üéØ TextEntryGenerator initialis√©', {
            version: TextEntryGenerator.GENERATOR_VERSION
        });
    }

    /**
     * G√©n√®re un exercice de type r√©ponse textuelle
     * 
     * @method generateExercise
     * @async
     * @param {ExerciseGenerationContext} context - Contexte de g√©n√©ration
     * @returns {Promise<ExtendedExercise>} Exercice g√©n√©r√©
     * @public
     */
    public async generateExercise(context: ExerciseGenerationContext): Promise<ExtendedExercise> {
        this.logger.info(`üéØ G√©n√©ration d'exercice text-entry pour le concept ${context.conceptId}`);

        try {
            // R√©cup√©rer les donn√©es du concept
            const concept = await this.conceptsService.getConceptData(context.conceptId);
            if (!concept) {
                throw new Error(`Concept ${context.conceptId} non trouv√©`);
            }

            // R√©cup√©rer les d√©tails du concept pour les exemples
            const conceptDetails = await this.conceptsService.getConceptDetails(context.conceptId);
            if (!conceptDetails) {
                throw new Error(`D√©tails du concept ${context.conceptId} non trouv√©s`);
            }

            const effectiveDifficulty = context.difficultyLevel ?? concept.difficulty;
            const difficultyLevel = this.mapDifficultyToLevel(effectiveDifficulty);
            const randomExample = await this.conceptsService.getRandomExample(context.conceptId);
            const example = randomExample || conceptDetails.examples[0] || concept.text;

            // G√©n√©ration de base de l'exercice
            let exercise: ExtendedExercise = {
                id: this.generateExerciseId('text-entry', context.conceptId),
                conceptId: context.conceptId,
                type: 'TextEntry' as SupportedExerciseType,
                difficulty: effectiveDifficulty,
                instructions: 'D√©crivez la signification du signe pr√©sent√© dans la vid√©o',
                content: {
                    videoUrl: concept.videoUrl || `/assets/signs/${context.conceptId}/${example}.mp4`,
                    questionText: this.generateQuestionForConcept(concept, conceptDetails, difficultyLevel, example),
                    acceptableAnswers: this.generateAcceptableAnswers(concept, conceptDetails, example),
                    answerSimilarityThreshold: 0.7
                },
                timeLimit: context.timeLimit ?? this.getDefaultTimeLimit(difficultyLevel),
                hints: [],
                skillsTargeted: [concept.categories[0] || 'g√©n√©ral', ...concept.relatedConcepts.slice(0, 2)],
                metadata: {
                    createdAt: new Date(),
                    level: this.mapDifficultyToCECRL(effectiveDifficulty),
                    difficulty: effectiveDifficulty,
                    estimatedDuration: this.estimateExerciseDuration(effectiveDifficulty)
                }
            };

            // Adaptation de la difficult√© si n√©cessaire
            if (context.currentSkillLevel !== undefined) {
                exercise = this.adaptExerciseDifficulty(exercise, context.currentSkillLevel);
            }

            // G√©n√©ration d'indices si demand√©
            if (context.includeHints) {
                exercise = await this.generateHints(exercise, this.getHintCountForDifficulty(effectiveDifficulty));
            }

            this.logger.info('‚úÖ Exercice text-entry g√©n√©r√© avec succ√®s', {
                exerciseId: exercise.id,
                difficulty: effectiveDifficulty,
                answersCount: exercise.content.acceptableAnswers.length
            });

            return exercise;

        } catch (error) {
            this.logger.error('‚ùå Erreur lors de la g√©n√©ration d\'exercice text-entry', {
                conceptId: context.conceptId,
                error: error instanceof Error ? error.message : String(error)
            });
            throw new Error(`√âchec de la g√©n√©ration d'exercice text-entry: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
        }
    }

    /**
     * Adapte la difficult√© d'un exercice de type r√©ponse textuelle
     * 
     * @method adaptExerciseDifficulty
     * @param {ExtendedExercise} exercise - Exercice √† adapter
     * @param {number} userSkillLevel - Niveau de comp√©tence de l'utilisateur (0-1)
     * @returns {ExtendedExercise} Exercice adapt√©
     * @public
     */
    public adaptExerciseDifficulty(
        exercise: ExtendedExercise,
        userSkillLevel: number
    ): ExtendedExercise {
        this.logger.debug('üîß Adaptation de la difficult√©', {
            exerciseId: exercise.id,
            userSkillLevel,
            originalDifficulty: exercise.difficulty
        });

        const adaptedExercise = { ...exercise };
        const content = { ...adaptedExercise.content };

        // Pour les d√©butants, augmenter le seuil de similarit√© (plus permissif)
        if (userSkillLevel < 0.3) {
            content.answerSimilarityThreshold = 0.6; // Plus permissif
            content.showVisualHint = true;

            // Augmenter le temps limite
            adaptedExercise.timeLimit = Math.round(adaptedExercise.timeLimit * 1.5);
        }
        // Pour les avanc√©s, r√©duire le seuil de similarit√© (plus strict)
        else if (userSkillLevel > 0.7) {
            content.answerSimilarityThreshold = 0.8; // Plus strict
            content.showVisualHint = false;
            content.requireDetailedAnswer = true;

            // R√©duire le temps limite pour les experts
            adaptedExercise.timeLimit = Math.round(adaptedExercise.timeLimit * 0.8);
        }

        adaptedExercise.content = content;
        adaptedExercise.difficulty = this.calculateAdaptedDifficulty(exercise.difficulty, userSkillLevel);

        this.logger.debug('‚úÖ Difficult√© adapt√©e', {
            exerciseId: exercise.id,
            newDifficulty: adaptedExercise.difficulty,
            newTimeLimit: adaptedExercise.timeLimit,
            similarityThreshold: content.answerSimilarityThreshold
        });

        return adaptedExercise;
    }

    /**
     * G√©n√®re des indices sp√©cifiques pour les exercices de type r√©ponse textuelle
     * 
     * @method generateHints
     * @param {ExtendedExercise} exercise - Exercice pour lequel g√©n√©rer des indices
     * @param {number} count - Nombre d'indices √† g√©n√©rer
     * @returns {Promise<ExtendedExercise>} Exercice avec indices ajout√©s
     * @public
     */
    public async generateHints(exercise: ExtendedExercise, count: number): Promise<ExtendedExercise> {
        this.logger.debug('üí° G√©n√©ration d\'indices', {
            exerciseId: exercise.id,
            requestedCount: count
        });

        const adaptedExercise = { ...exercise };

        try {
            const concept = await this.conceptsService.getConceptData(exercise.conceptId);
            const conceptDetails = await this.conceptsService.getConceptDetails(exercise.conceptId);

            // Indices sp√©cifiques aux exercices de type r√©ponse textuelle
            const availableHints: readonly string[] = [
                'Observez attentivement la configuration des mains',
                'Le mouvement du signe peut indiquer sa signification',
                'Pensez aux expressions faciales qui accompagnent le signe',
                'Certains signes sont iconiques et repr√©sentent visuellement leur concept',
                `Ce signe appartient √† la cat√©gorie "${concept?.categories[0] || 'non sp√©cifi√©e'}"`,
                `Ce concept est li√© √† ${concept?.relatedConcepts.join(', ') || 'des concepts associ√©s'}`,
                `Contexte d'utilisation : ${conceptDetails?.contexts.join(', ') || 'contextes vari√©s'}`,
                'Analysez l\'espace de signation utilis√© pour ce signe'
            ];

            // Limiter au nombre demand√© et ajouter √† l'exercice
            adaptedExercise.hints = availableHints.slice(0, Math.min(count, availableHints.length));

            this.logger.debug('‚úÖ Indices g√©n√©r√©s', {
                exerciseId: exercise.id,
                hintsCount: adaptedExercise.hints.length
            });

            return adaptedExercise;
        } catch (error) {
            this.logger.warn('‚ö†Ô∏è Erreur lors de la g√©n√©ration d\'indices, utilisation d\'indices par d√©faut', {
                exerciseId: exercise.id,
                error: error instanceof Error ? error.message : String(error)
            });

            // Fallback avec des indices g√©n√©riques
            const genericHints = [
                'Observez attentivement la configuration des mains',
                'Le mouvement du signe peut indiquer sa signification',
                'Pensez aux expressions faciales qui accompagnent le signe',
                'Certains signes sont iconiques et repr√©sentent visuellement leur concept'
            ];

            adaptedExercise.hints = genericHints.slice(0, Math.min(count, genericHints.length));
            return adaptedExercise;
        }
    }

    // ================== M√âTHODES PRIV√âES ==================

    /**
     * G√©n√®re une question pour un concept
     * @param concept Donn√©es du concept
     * @param conceptDetails D√©tails du concept
     * @param difficultyLevel Niveau de difficult√©
     * @param currentExample Exemple utilis√© dans l'exercice
     * @returns Question g√©n√©r√©e
     * @private
     */
    private generateQuestionForConcept(
        concept: LSFConcept,
        conceptDetails: LSFConceptDetails,
        difficultyLevel: DifficultyLevel,
        currentExample: string
    ): string {
        // Questions par niveau de difficult√©
        const questions: Record<DifficultyLevel, readonly string[]> = {
            beginner: [
                'Que signifie ce signe en LSF?',
                'Comment traduiriez-vous ce signe en fran√ßais?',
                'Quel mot ou expression repr√©sente ce signe?'
            ],
            easy: [
                `Quelle est la signification de ce signe dans le contexte de ${concept.text}?`,
                'Comment interpr√©teriez-vous ce signe en fran√ßais?',
                `Que repr√©sente ce signe ("${currentExample}") dans une conversation courante?`
            ],
            medium: [
                `D√©crivez la signification de ce signe et son utilisation dans le contexte de ${concept.text}`,
                'Expliquez ce que ce signe exprime et dans quel contexte il est utilis√©',
                `Quelle est la signification pr√©cise de ce signe ("${currentExample}") dans le cadre de ${concept.categories[0] || 'cette cat√©gorie'}?`
            ],
            hard: [
                'Donnez une explication d√©taill√©e de ce signe, incluant sa signification et son contexte d\'utilisation',
                `D√©crivez pr√©cis√©ment ce que ce signe ("${currentExample}") exprime et comment il est utilis√© dans diff√©rents contextes`,
                'Analysez la signification de ce signe et expliquez les nuances qu\'il peut avoir selon le contexte'
            ],
            expert: [
                'Fournissez une analyse approfondie de ce signe, incluant sa signification, son √©tymologie et ses usages contextuels',
                `D√©crivez en d√©tail la signification de ce signe ("${currentExample}"), ses variations r√©gionales possibles et son utilisation dans des contextes formels et informels`,
                'Analysez ce signe en termes de param√®tres formationnels, de signification et d\'usage sociolinguistique'
            ]
        };

        // S√©lection d'une question al√©atoire selon le niveau de difficult√©
        const questionSet = questions[difficultyLevel];
        return questionSet[Math.floor(Math.random() * questionSet.length)];
    }

    /**
     * G√©n√®re les r√©ponses acceptables pour un exercice
     * @param concept Donn√©es du concept
     * @param conceptDetails D√©tails du concept
     * @param example Exemple utilis√© dans l'exercice
     * @returns Liste des r√©ponses acceptables
     * @private
     */
    private generateAcceptableAnswers(
        concept: LSFConcept,
        conceptDetails: LSFConceptDetails,
        example: string
    ): readonly string[] {
        // Commencer par l'exemple lui-m√™me et le texte du concept
        const answers = new Set([example, concept.text]);

        // Ajouter des synonymes du concept
        if (conceptDetails.synonyms.length > 0) {
            conceptDetails.synonyms.forEach(synonym => answers.add(synonym));
        }

        // Ajouter des variations avec des formulations diff√©rentes
        answers.add(`Le signe pour ${example}`);
        answers.add(`${example.charAt(0).toUpperCase() + example.slice(1)}`);
        answers.add(`Un signe qui signifie ${example}`);
        answers.add(`${example} en LSF`);
        answers.add(concept.text.toLowerCase());
        answers.add(concept.text.charAt(0).toUpperCase() + concept.text.slice(1));

        // Ajouter des variations des exemples disponibles
        conceptDetails.examples.forEach(ex => {
            if (ex !== example) {
                answers.add(ex);
                answers.add(ex.toLowerCase());
            }
        });

        return Array.from(answers);
    }

    /**
     * Mappe une difficult√© num√©rique vers un niveau de difficult√© textuel
     * @param difficulty Difficult√© num√©rique (0-1)
     * @returns Niveau de difficult√© correspondant
     * @private
     */
    private mapDifficultyToLevel(difficulty: number): DifficultyLevel {
        if (difficulty <= 0.2) return 'beginner';
        if (difficulty <= 0.4) return 'easy';
        if (difficulty <= 0.6) return 'medium';
        if (difficulty <= 0.8) return 'hard';
        return 'expert';
    }

    /**
     * Obtient la limite de temps par d√©faut selon le niveau de difficult√©
     * @param difficultyLevel Niveau de difficult√©
     * @returns Temps limite en secondes
     * @private
     */
    private getDefaultTimeLimit(difficultyLevel: DifficultyLevel): number {
        return TextEntryGenerator.DEFAULT_TIME_LIMITS[difficultyLevel];
    }

    /**
     * Calcule le nombre d'indices selon la difficult√©
     * @param difficulty Niveau de difficult√© num√©rique
     * @returns Nombre d'indices
     * @private
     */
    private getHintCountForDifficulty(difficulty: number): number {
        if (difficulty <= 0.3) return 4; // Plus d'indices pour les d√©butants
        if (difficulty <= 0.7) return 2; // Indices mod√©r√©s
        return 1; // Minimal pour les experts
    }

    /**
     * G√©n√®re un ID unique pour l'exercice
     * @param type Type d'exercice
     * @param conceptId ID du concept
     * @returns ID g√©n√©r√©
     * @private
     */
    private generateExerciseId(type: string, conceptId: string): string {
        const timestamp = Date.now();
        const random = Math.floor(Math.random() * 1000);
        return `exercise-${type}-${timestamp}-${conceptId}-${random}`;
    }

    /**
     * Calcule la difficult√© adapt√©e selon le niveau utilisateur
     * @param originalDifficulty Difficult√© originale
     * @param userSkillLevel Niveau de comp√©tence utilisateur
     * @returns Difficult√© adapt√©e
     * @private
     */
    private calculateAdaptedDifficulty(originalDifficulty: number, userSkillLevel: number): number {
        const adjustment = (userSkillLevel - originalDifficulty) * 0.3;
        const adaptedDifficulty = originalDifficulty + adjustment;
        return Math.max(0, Math.min(1, adaptedDifficulty));
    }

    /**
     * Mappe une difficult√© num√©rique vers un niveau CECRL
     * @param difficulty Difficult√© num√©rique (0-1)
     * @returns Niveau CECRL correspondant
     * @private
     */
    private mapDifficultyToCECRL(difficulty: number): CECRLLevel {
        if (difficulty <= 0.16) return 'A1';
        if (difficulty <= 0.33) return 'A2';
        if (difficulty <= 0.50) return 'B1';
        if (difficulty <= 0.66) return 'B2';
        if (difficulty <= 0.83) return 'C1';
        return 'C2';
    }

    /**
     * Estime la dur√©e d'un exercice en fonction de sa difficult√©
     * @param difficulty Niveau de difficult√© (0-1)
     * @returns Dur√©e estim√©e en minutes
     * @private
     */
    private estimateExerciseDuration(difficulty: number): number {
        const baseDuration = 8; // 8 minutes de base pour un exercice de saisie
        const difficultyMultiplier = 1 + (difficulty * 0.5);
        return Math.round(baseDuration * difficultyMultiplier);
    }
}