/**
 * @file src/ai/services/learning/human/coda/codavirtuel/adapters/IExerciseAdapter.ts
 * @description Interface pour l'adaptation intelligente d'exercices
 * 
 * Fonctionnalit√©s :
 * - üéØ Interface standardis√©e pour adaptation d'exercices
 * - üîß Compatible exactOptionalPropertyTypes: true
 * - üìä Adaptation bas√©e sur profil utilisateur
 * - üåü Support multi-modal et culturel
 * 
 * @module adapters
 * @version 1.0.0 - Interface r√©volutionnaire
 * @since 2025
 * @author MetaSign Team - CODA Adapters
 * @lastModified 2025-07-19
 */

import type {
    UserReverseProfile,
    ExerciseGenerationParams,
    UserAdaptedExercise
} from '../types/index';

import type { GeneratedExercise } from '../exercises/ExerciseGeneratorService';

/**
 * Interface pour les r√©sultats d'√©valuation
 */
export interface EvaluationResult {
    /** Identifiant de l'exercice √©valu√© */
    readonly exerciseId: string;

    /** Identifiant de l'utilisateur */
    readonly userId: string;

    /** Score obtenu */
    readonly score: number;

    /** Pourcentage de r√©ussite */
    readonly percentage: number;

    /** Indique si la r√©ponse est correcte */
    readonly isCorrect: boolean;

    /** Feedback textuel */
    readonly feedback: string;

    /** Suggestions d'am√©lioration */
    readonly suggestions: readonly string[];

    /** Horodatage de l'√©valuation */
    readonly timestamp: Date;

    /** Temps pass√© sur l'exercice (en secondes) */
    readonly timeSpent?: number;

    /** M√©tadonn√©es additionnelles */
    readonly metadata?: Record<string, unknown>;
}

/**
 * Interface pour l'adaptation d'exercices
 */
export interface IExerciseAdapter {
    /**
     * G√©n√®re les param√®tres d'exercice bas√©s sur le profil utilisateur
     * 
     * @param userProfile - Profil de l'utilisateur
     * @param previousExercise - Exercice pr√©c√©dent (optionnel)
     * @param adaptiveDifficulty - Activer l'adaptation de difficult√©
     * @param focusOnWeaknesses - Se concentrer sur les faiblesses
     * @returns Param√®tres d'exercice g√©n√©r√©s
     */
    generateExerciseParams(
        userProfile: UserReverseProfile,
        previousExercise?: GeneratedExercise,
        adaptiveDifficulty?: boolean,
        focusOnWeaknesses?: boolean
    ): ExerciseGenerationParams;

    /**
     * Adapte un exercice g√©n√©r√© au profil utilisateur
     * 
     * @param exercise - Exercice √† adapter
     * @param userProfile - Profil utilisateur
     * @param simulateErrors - Simuler des erreurs pour l'apprentissage
     * @param errorRate - Taux d'erreur √† simuler
     * @returns Exercice adapt√©
     */
    adaptExercise(
        exercise: GeneratedExercise,
        userProfile: UserReverseProfile,
        simulateErrors?: boolean,
        errorRate?: number
    ): Promise<UserAdaptedExercise>;

    /**
     * Analyse l'interaction utilisateur pour l'adaptation future
     * 
     * @param userProfile - Profil utilisateur
     * @param exercise - Exercice effectu√©
     * @param result - R√©sultat de l'exercice
     * @returns Insights pour adaptation future
     */
    analyzeInteraction(
        userProfile: UserReverseProfile,
        exercise: UserAdaptedExercise,
        result: EvaluationResult
    ): Promise<AdaptationInsights>;

    /**
     * Recommande le prochain exercice bas√© sur l'historique
     * 
     * @param userProfile - Profil utilisateur
     * @param recentResults - R√©sultats r√©cents
     * @returns Recommandations d'exercice
     */
    recommendNextExercise(
        userProfile: UserReverseProfile,
        recentResults: readonly EvaluationResult[]
    ): Promise<ExerciseRecommendation>;

    /**
     * Adapte la difficult√© en temps r√©el
     * 
     * @param currentDifficulty - Difficult√© actuelle
     * @param performance - Performance utilisateur
     * @param adaptationRate - Vitesse d'adaptation
     * @returns Nouvelle difficult√©
     */
    adaptDifficulty(
        currentDifficulty: number,
        performance: PerformanceMetrics,
        adaptationRate?: number
    ): number;
}

/**
 * Insights pour l'adaptation future
 */
export interface AdaptationInsights {
    /** Points forts identifi√©s */
    readonly strengths: readonly string[];

    /** Faiblesses identifi√©es */
    readonly weaknesses: readonly string[];

    /** Style d'apprentissage pr√©f√©r√© */
    readonly preferredLearningStyle: 'visual' | 'kinesthetic' | 'auditory' | 'mixed';

    /** Difficult√© optimale recommand√©e */
    readonly optimalDifficulty: number;

    /** Zones de focus sugg√©r√©es */
    readonly suggestedFocusAreas: readonly string[];

    /** Pr√©f√©rences culturelles */
    readonly culturalPreferences: readonly string[];

    /** Facteurs de motivation */
    readonly motivationFactors: readonly string[];

    /** Dur√©e d'attention (en minutes) */
    readonly attentionSpan: number;

    /** Niveau de confiance (0-1) */
    readonly confidence: number;
}

/**
 * Recommandation d'exercice
 */
export interface ExerciseRecommendation {
    /** Type d'exercice recommand√© */
    readonly recommendedType: string;

    /** Difficult√© sugg√©r√©e */
    readonly suggestedDifficulty: number;

    /** Zones de focus */
    readonly focusAreas: readonly string[];

    /** Raisonnement de la recommandation */
    readonly reasoning: string;

    /** Types alternatifs */
    readonly alternativeTypes: readonly string[];

    /** Dur√©e estim√©e (en minutes) */
    readonly estimatedDuration: number;

    /** Priorit√© de la recommandation */
    readonly priority: 'high' | 'medium' | 'low';

    /** Contexte culturel recommand√© */
    readonly culturalContext?: string;
}

/**
 * M√©triques de performance
 */
export interface PerformanceMetrics {
    /** Pr√©cision des r√©ponses (0-1) */
    readonly accuracy: number;

    /** Vitesse de r√©ponse (0-1) */
    readonly speed: number;

    /** Consistance des performances (0-1) */
    readonly consistency: number;

    /** Niveau d'engagement (0-1) */
    readonly engagement: number;

    /** Patterns d'erreurs identifi√©s */
    readonly errorPattern: readonly string[];

    /** Distribution du temps par section */
    readonly timeDistribution: readonly number[];
}

/**
 * Configuration d'adaptation
 */
export interface AdaptationConfig {
    /** Activer l'adaptation en temps r√©el */
    readonly enableRealTimeAdaptation: boolean;

    /** Sensibilit√© de l'adaptation (0-1) */
    readonly adaptationSensitivity: number;

    /** Changement maximum de difficult√© par session */
    readonly maxDifficultyChange: number;

    /** Nombre minimum de sessions avant adaptation */
    readonly minSessionsBeforeAdaptation: number;

    /** Sensibilit√© culturelle (0-1) */
    readonly culturalSensitivity: number;

    /** Activer la simulation d'erreurs */
    readonly errorSimulationEnabled: boolean;

    /** Adaptation bas√©e sur la personnalit√© */
    readonly personalityBasedAdaptation: boolean;
}