/**
 * @file src/ai/services/learning/human/coda/codavirtuel/evaluators/CECRLLevelEvaluator.ts
 * @description √âvaluateur de niveau CECRL r√©volutionnaire pour l'apprentissage de la LSF
 * 
 * Fonctionnalit√©s r√©volutionnaires :
 * - üéØ √âvaluation CECRL intelligente (A1‚ÜíC2) adapt√©e √† la LSF
 * - üìä Analyse multi-comp√©tences LSF sp√©cialis√©es
 * - üß† Recommandations personnalis√©es et pr√©dictives
 * - üìà Progression adaptative avec seuils dynamiques
 * - üåü Int√©gration compl√®te avec l'√©cosyst√®me MetaSign
 * 
 * @module CECRLLevelEvaluator
 * @version 2.1.0
 * @since 2025
 * @author MetaSign Team - CECRL Revolutionary Edition
 * @lastModified 2025-07-20
 */

import { LoggerFactory } from '@/ai/utils/LoggerFactory';
import type {
    LevelEvaluation,
    CECRLLevel
} from '../types/index';

// ===== TYPES SP√âCIALIS√âS POUR L'√âVALUATEUR CECRL =====

/**
 * Pr√©diction d'apprentissage pour une comp√©tence sp√©cifique
 */
interface LearningPrediction {
    /** Domaine d'apprentissage concern√© */
    readonly area: string;
    /** Niveau de difficult√© pr√©vu */
    readonly difficulty: 'easy' | 'medium' | 'hard' | 'expert';
    /** Temps estim√© en minutes */
    readonly timeEstimate: number;
    /** Niveau de confiance dans la pr√©diction (0-1) */
    readonly confidence: number;
    /** Recommandations sp√©cifiques */
    readonly recommendations: readonly string[];
    /** Obstacles potentiels identifi√©s */
    readonly potentialObstacles: readonly string[];
    /** Strat√©gies d'adaptation sugg√©r√©es */
    readonly adaptationStrategies: readonly string[];
}

/**
 * R√©sultat d'exercice avec m√©tadonn√©es enrichies
 */
interface ExerciseResult {
    /** Score de l'exercice (0-1) */
    readonly score: number;
    /** Type d'exercice r√©alis√© */
    readonly type?: string;
    /** Comp√©tences LSF cibl√©es */
    readonly targetedSkills?: readonly string[];
    /** Temps pass√© sur l'exercice (en secondes) */
    readonly timeSpent?: number;
    /** Nombre de tentatives */
    readonly attempts?: number;
    /** Date de r√©alisation */
    readonly timestamp?: Date;
    /** Erreurs commises pendant l'exercice */
    readonly errors?: readonly string[];
    /** Feedback re√ßu */
    readonly feedback?: string;
}

/**
 * Domaine de comp√©tence LSF sp√©cialis√©
 */
interface LSFCompetencyArea {
    /** Identifiant de la comp√©tence */
    readonly id: string;
    /** Nom de la comp√©tence */
    readonly name: string;
    /** Description */
    readonly description: string;
    /** Poids dans l'√©valuation globale */
    readonly weight: number;
    /** Comp√©tences li√©es */
    readonly relatedSkills: readonly string[];
}

/**
 * Description d√©taill√©e d'un niveau CECRL
 */
interface CECRLLevelDescription {
    /** Identifiant du niveau */
    readonly id: CECRLLevel;
    /** Nom complet du niveau */
    readonly name: string;
    /** Description des comp√©tences √† ce niveau */
    readonly description: string;
    /** Comp√©tences LSF attendues pour ce niveau */
    readonly expectedSkills: readonly string[];
    /** Score minimum pour valider ce niveau (0-1) */
    readonly minimumScore: number;
    /** Score recommand√© pour passer au niveau suivant (0-1) */
    readonly recommendedProgressionScore: number;
    /** Dur√©e recommand√©e √† ce niveau (en heures) */
    readonly recommendedDuration: number;
    /** Indicateurs de ma√Ætrise sp√©cifiques */
    readonly masteryIndicators: readonly string[];
}

/**
 * Analyse d√©taill√©e d'une comp√©tence sp√©cifique
 */
interface CompetencyAnalysis {
    /** Score dans cette comp√©tence (0-1) */
    readonly score: number;
    /** Niveau dans cette comp√©tence */
    readonly level: CECRLLevel;
    /** Progression dans cette comp√©tence (0-1) */
    readonly progress: number;
    /** Points forts identifi√©s */
    readonly strengths: readonly string[];
    /** Points faibles identifi√©s */
    readonly weaknesses: readonly string[];
    /** Recommandations sp√©cifiques */
    readonly recommendations: readonly string[];
}

/**
 * R√©sultat d'√©valuation d√©taill√© avec analyses approfondies
 */
interface DetailedEvaluationResult extends LevelEvaluation {
    /** Analyse d√©taill√©e par comp√©tence LSF */
    readonly competencyAnalysis: Readonly<Record<string, CompetencyAnalysis>>;
    /** Pr√©dictions d'apprentissage */
    readonly predictions: readonly LearningPrediction[];
    /** Recommandations sp√©cifiques */
    readonly recommendations: readonly string[];
    /** Temps estim√© pour progression */
    readonly estimatedProgressionTime: number;
    /** Confiance dans l'√©valuation (0-1) */
    readonly evaluationConfidence: number;
}

/**
 * √âvaluateur de niveau CECRL r√©volutionnaire pour la LSF
 * 
 * @class CECRLLevelEvaluator
 * @description Syst√®me d'√©valuation intelligent qui adapte l'√©valuation CECRL 
 * aux sp√©cificit√©s de la Langue des Signes Fran√ßaise
 * 
 * @example
 * ```typescript
 * const evaluator = new CECRLLevelEvaluator();
 * 
 * const evaluation = await evaluator.evaluateUserLevel('user123', exerciseHistory);
 * const analysis = await evaluator.analyzeCompetencies(exerciseHistory);
 * const predictions = await evaluator.generateProgressionPredictions('user123', 'A2');
 * ```
 */
export class CECRLLevelEvaluator {
    /**
     * Logger pour le suivi des op√©rations
     * @private
     * @readonly
     */
    private readonly logger = LoggerFactory.getLogger('CECRLLevelEvaluator_v2');

    /**
     * Comp√©tences LSF sp√©cialis√©es
     * @private
     * @readonly
     */
    private readonly lsfCompetencies: readonly LSFCompetencyArea[] = [
        {
            id: 'grammar_lsf',
            name: 'Grammaire LSF',
            description: 'Ma√Ætrise des structures grammaticales sp√©cifiques √† la LSF',
            weight: 0.3,
            relatedSkills: ['spatial_grammar', 'classifiers', 'temporal_markers']
        },
        {
            id: 'vocabulary_lsf',
            name: 'Vocabulaire LSF',
            description: '√âtendue et pr√©cision du vocabulaire en signes',
            weight: 0.25,
            relatedSkills: ['basic_signs', 'specialized_vocabulary', 'regional_variants']
        },
        {
            id: 'expression_lsf',
            name: 'Expression LSF',
            description: 'Capacit√© √† s\'exprimer clairement et naturellement',
            weight: 0.25,
            relatedSkills: ['fluency', 'narrative_skills', 'emotional_expression']
        },
        {
            id: 'comprehension_lsf',
            name: 'Compr√©hension LSF',
            description: 'Capacit√© √† comprendre la LSF dans divers contextes',
            weight: 0.2,
            relatedSkills: ['sign_recognition', 'context_understanding', 'rapid_comprehension']
        }
    ] as const;

    /**
     * Description des niveaux CECRL adapt√©s √† la LSF
     * @private
     * @readonly
     */
    private readonly levels: readonly CECRLLevelDescription[] = [
        {
            id: 'A1',
            name: 'Niveau Introductif LSF',
            description: 'Peut comprendre et utiliser des expressions famili√®res et quotidiennes ainsi que des √©nonc√©s simples en LSF. Peut se pr√©senter ou pr√©senter quelqu\'un et poser des questions sur des d√©tails personnels.',
            expectedSkills: ['basic_vocabulary', 'simple_greetings', 'basic_questions', 'sign_recognition'],
            minimumScore: 0.3,
            recommendedProgressionScore: 0.7,
            recommendedDuration: 40,
            masteryIndicators: ['Ma√Ætrise des signes de base', 'Communication simple', 'Compr√©hension des phrases courtes']
        },
        {
            id: 'A2',
            name: 'Niveau Interm√©diaire LSF',
            description: 'Peut communiquer lors de t√¢ches simples et habituelles. Peut d√©crire avec des moyens simples son environnement et √©voquer des sujets qui correspondent √† des besoins imm√©diats.',
            expectedSkills: ['extended_vocabulary', 'simple_expressions', 'daily_life_communication', 'short_narrative'],
            minimumScore: 0.4,
            recommendedProgressionScore: 0.75,
            recommendedDuration: 60,
            masteryIndicators: ['Communication quotidienne fluide', 'Descriptions simples', 'Compr√©hension de conversations courtes']
        },
        {
            id: 'B1',
            name: 'Niveau Seuil LSF',
            description: 'Peut comprendre les points essentiels d\'un discours sign√© en LSF sur des sujets familiers. Peut raconter un √©v√©nement, une exp√©rience et exposer bri√®vement ses raisons ou explications pour un projet ou une id√©e.',
            expectedSkills: ['complex_vocabulary', 'expression_variety', 'narrative_skills', 'topic_explanation'],
            minimumScore: 0.5,
            recommendedProgressionScore: 0.8,
            recommendedDuration: 80,
            masteryIndicators: ['Narration d\'√©v√©nements', 'Expression d\'opinions', 'Compr√©hension de sujets familiers']
        },
        {
            id: 'B2',
            name: 'Niveau Avanc√© LSF',
            description: 'Peut comprendre le contenu essentiel de discours sign√©s complexes sur des sujets concrets ou abstraits. Peut communiquer avec un degr√© de spontan√©it√© et d\'aisance tel qu\'une conversation avec un locuteur natif soit possible sans tension.',
            expectedSkills: ['advanced_vocabulary', 'subtleties', 'fluent_conversation', 'abstract_topics'],
            minimumScore: 0.6,
            recommendedProgressionScore: 0.85,
            recommendedDuration: 100,
            masteryIndicators: ['Conversations spontan√©es', 'Sujets abstraits', 'Nuances culturelles']
        },
        {
            id: 'C1',
            name: 'Niveau Autonome LSF',
            description: 'Peut comprendre des discours sign√©s longs et exigeants en LSF. Peut s\'exprimer spontan√©ment et couramment sans rechercher ses signes de fa√ßon apparente. Peut utiliser la langue de fa√ßon efficace pour des relations sociales ou acad√©miques/professionnelles.',
            expectedSkills: ['complex_expressions', 'cultural_subtleties', 'idiomatic_usage', 'social_pragmatics'],
            minimumScore: 0.7,
            recommendedProgressionScore: 0.9,
            recommendedDuration: 120,
            masteryIndicators: ['Expression spontan√©e', 'Subtilit√©s culturelles', 'Usage acad√©mique/professionnel']
        },
        {
            id: 'C2',
            name: 'Niveau Ma√Ætrise LSF',
            description: 'Peut comprendre sans effort pratiquement tout ce qui est sign√©. Peut reconstituer faits et arguments de diverses sources et en pr√©senter une synth√®se coh√©rente en LSF. Peut s\'exprimer spontan√©ment, tr√®s couramment et de fa√ßon pr√©cise.',
            expectedSkills: ['native_like_fluency', 'cultural_mastery', 'subtle_expressions', 'meta_linguistic_awareness'],
            minimumScore: 0.8,
            recommendedProgressionScore: 1.0,
            recommendedDuration: 150,
            masteryIndicators: ['Ma√Ætrise quasi-native', 'Synth√®se complexe', 'Cr√©ativit√© linguistique']
        }
    ] as const;

    /**
     * Constructeur de l'√©valuateur CECRL
     * 
     * @constructor
     */
    constructor() {
        this.logger.info('üéØ CECRLLevelEvaluator 2.1 initialis√©', {
            levelsCount: this.levels.length,
            competenciesCount: this.lsfCompetencies.length
        });
    }

    // ==================== M√âTHODES PUBLIQUES PRINCIPALES ====================

    /**
     * √âvalue le niveau CECRL d'un utilisateur avec analyse d√©taill√©e
     * 
     * @method evaluateUserLevel
     * @async
     * @param {string} userId - Identifiant de l'utilisateur
     * @param {readonly ExerciseResult[]} exerciseHistory - Historique des exercices
     * @returns {Promise<DetailedEvaluationResult>} √âvaluation d√©taill√©e
     * @public
     */
    public async evaluateUserLevel(
        userId: string,
        exerciseHistory: readonly ExerciseResult[]
    ): Promise<DetailedEvaluationResult> {
        try {
            this.logger.info('üîç D√©but √©valuation CECRL utilisateur', {
                userId,
                exercisesCount: exerciseHistory.length
            });

            // V√©rification des donn√©es d'entr√©e
            if (exerciseHistory.length === 0) {
                return this.createEmptyDetailedEvaluation(userId, 'A1');
            }

            // Analyse par comp√©tence LSF
            const competencyAnalysis = await this.analyzeCompetencies(exerciseHistory);

            // D√©termination du niveau global
            const overallLevel = this.determineOverallLevel(competencyAnalysis);

            // Calcul de la progression dans le niveau actuel
            const progressInCurrentLevel = this.calculateProgressInLevel(overallLevel, competencyAnalysis);

            // G√©n√©ration des pr√©dictions d'apprentissage
            const predictions = await this.generateProgressionPredictions(
                userId,
                overallLevel,
                competencyAnalysis
            );

            // G√©n√©ration des recommandations
            const recommendations = this.generateRecommendations(competencyAnalysis, overallLevel);

            // Estimation du temps de progression
            const estimatedProgressionTime = this.estimateProgressionTime(
                overallLevel,
                competencyAnalysis
            );

            // Calcul de la confiance dans l'√©valuation
            const evaluationConfidence = this.calculateEvaluationConfidence(exerciseHistory);

            // D√©termination du niveau recommand√©
            const recommendedLevel = this.determineRecommendedLevel(
                overallLevel,
                competencyAnalysis,
                progressInCurrentLevel
            );

            const result: DetailedEvaluationResult = {
                currentLevel: overallLevel,
                recommendedLevel,
                levelChangeRecommended: overallLevel !== recommendedLevel,
                progressInCurrentLevel,
                scores: this.extractScoresFromAnalysis(competencyAnalysis),
                explanation: this.generateExplanation(overallLevel, recommendedLevel, competencyAnalysis),
                strengthAreas: this.identifyStrengthAreas(competencyAnalysis),
                weaknessAreas: this.identifyWeaknessAreas(competencyAnalysis),
                competencyAnalysis,
                predictions,
                recommendations,
                estimatedProgressionTime,
                evaluationConfidence
            };

            this.logger.info('‚úÖ √âvaluation CECRL termin√©e', {
                userId,
                currentLevel: overallLevel,
                recommendedLevel,
                confidence: evaluationConfidence
            });

            return result;
        } catch (error) {
            this.logger.error('‚ùå Erreur lors de l\'√©valuation CECRL', { userId, error });
            throw new Error(`Impossible d'√©valuer le niveau CECRL pour l'utilisateur ${userId}`);
        }
    }

    /**
     * Analyse les comp√©tences LSF sp√©cifiques
     * 
     * @method analyzeCompetencies
     * @async
     * @param {readonly ExerciseResult[]} exerciseHistory - Historique des exercices
     * @returns {Promise<Readonly<Record<string, CompetencyAnalysis>>>} Analyse par comp√©tence
     * @public
     */
    public async analyzeCompetencies(
        exerciseHistory: readonly ExerciseResult[]
    ): Promise<Readonly<Record<string, CompetencyAnalysis>>> {
        const analysis: Record<string, CompetencyAnalysis> = {};

        for (const competency of this.lsfCompetencies) {
            // Filtrer les exercices relatifs √† cette comp√©tence
            const relevantExercises = this.filterExercisesByCompetency(
                exerciseHistory,
                competency
            );

            // Analyser cette comp√©tence sp√©cifique
            analysis[competency.id] = await this.analyzeSpecificCompetency(
                competency,
                relevantExercises
            );
        }

        return analysis as Readonly<Record<string, CompetencyAnalysis>>;
    }

    /**
     * G√©n√®re des pr√©dictions de progression personnalis√©es
     * 
     * @method generateProgressionPredictions
     * @async
     * @param {string} userId - Identifiant utilisateur
     * @param {CECRLLevel} currentLevel - Niveau actuel
     * @param {Readonly<Record<string, CompetencyAnalysis>>} competencyAnalysis - Analyse des comp√©tences
     * @returns {Promise<readonly LearningPrediction[]>} Pr√©dictions d'apprentissage
     * @public
     */
    public async generateProgressionPredictions(
        userId: string,
        currentLevel: CECRLLevel,
        competencyAnalysis: Readonly<Record<string, CompetencyAnalysis>>
    ): Promise<readonly LearningPrediction[]> {
        const predictions: LearningPrediction[] = [];

        // Pr√©diction pour chaque comp√©tence faible
        for (const [competencyId, analysis] of Object.entries(competencyAnalysis)) {
            if (analysis.score < 0.6) { // Comp√©tence √† am√©liorer
                const competency = this.lsfCompetencies.find(c => c.id === competencyId);
                if (competency) {
                    predictions.push({
                        area: competency.name,
                        difficulty: this.determineDifficultyForCompetency(analysis.score),
                        timeEstimate: this.estimateTimeForCompetency(competency, analysis),
                        confidence: this.calculatePredictionConfidence(analysis),
                        recommendations: analysis.recommendations,
                        potentialObstacles: this.identifyPotentialObstacles(competency, analysis),
                        adaptationStrategies: this.suggestAdaptationStrategies(competency, analysis)
                    });
                }
            }
        }

        // Pr√©diction de progression g√©n√©rale
        const overallProgress = this.calculateOverallProgress(competencyAnalysis);
        if (overallProgress < 0.8) {
            predictions.push({
                area: 'Progression g√©n√©rale CECRL',
                difficulty: currentLevel === 'A1' ? 'medium' : 'hard',
                timeEstimate: this.estimateOverallProgressionTime(currentLevel, overallProgress),
                confidence: 0.8,
                recommendations: [
                    'Pratique r√©guli√®re dans les domaines faibles',
                    'Immersion culturelle LSF',
                    'Interaction avec la communaut√© sourde'
                ],
                potentialObstacles: ['Plateau d\'apprentissage', 'Motivation fluctuante'],
                adaptationStrategies: ['Diversification des exercices', 'Gamification', 'Apprentissage social']
            });
        }

        return predictions;
    }

    // ==================== M√âTHODES COMPATIBILIT√â LEGACY ====================

    /**
     * √âvalue le niveau linguistique (m√©thode de compatibilit√©)
     * 
     * @method evaluateLevel
     * @param {CECRLLevel} currentLevel - Niveau actuel
     * @param {readonly ExerciseResult[]} exerciseHistory - Historique des exercices
     * @returns {LevelEvaluation} R√©sultat de l'√©valuation
     * @public
     */
    public evaluateLevel(
        currentLevel: CECRLLevel,
        exerciseHistory: readonly ExerciseResult[]
    ): LevelEvaluation {
        if (exerciseHistory.length === 0) {
            return this.createEmptyEvaluation(currentLevel);
        }

        // Calcul simplifi√© pour compatibilit√©
        const skillScores = this.calculateBasicSkillScores(exerciseHistory);
        const progress = this.estimateProgressInLevel(currentLevel, exerciseHistory);

        let recommendedLevel = currentLevel;
        let explanation = '';

        if (this.shouldProgressToNextLevel(currentLevel, exerciseHistory)) {
            recommendedLevel = this.getNextLevel(currentLevel);
            explanation = `Excellent progr√®s au niveau ${currentLevel}. Progression vers ${recommendedLevel} recommand√©e.`;
        } else if (this.shouldRegressToPreviousLevel(currentLevel, exerciseHistory)) {
            recommendedLevel = this.getPreviousLevel(currentLevel);
            explanation = `Difficult√©s au niveau ${currentLevel}. Retour au niveau ${recommendedLevel} recommand√©.`;
        } else {
            explanation = `Niveau ${currentLevel} appropri√©. Continuer le travail sur les points faibles.`;
        }

        return {
            currentLevel,
            recommendedLevel,
            levelChangeRecommended: currentLevel !== recommendedLevel,
            progressInCurrentLevel: progress,
            scores: skillScores,
            explanation,
            strengthAreas: this.identifyBasicStrengths(skillScores),
            weaknessAreas: this.identifyBasicWeaknesses(skillScores)
        };
    }

    /**
     * Estime la progression dans le niveau actuel
     * 
     * @method estimateProgressInLevel
     * @param {CECRLLevel} currentLevel - Niveau actuel
     * @param {readonly ExerciseResult[]} exerciseHistory - Historique des exercices
     * @returns {number} Progression estim√©e (0-1)
     * @public
     */
    public estimateProgressInLevel(
        currentLevel: CECRLLevel,
        exerciseHistory: readonly ExerciseResult[]
    ): number {
        const levelInfo = this.getLevelDescription(currentLevel);
        if (!levelInfo || exerciseHistory.length === 0) {
            return 0;
        }

        const recentHistory = this.getRecentHistory(exerciseHistory, 25);
        const averageScore = this.calculateAverageScore(recentHistory);

        const relativeProgress = (averageScore - levelInfo.minimumScore) /
            (levelInfo.recommendedProgressionScore - levelInfo.minimumScore);

        return Math.max(0, Math.min(1, relativeProgress));
    }

    /**
     * D√©termine si une progression vers le niveau sup√©rieur est recommand√©e
     * 
     * @method shouldProgressToNextLevel
     * @param {CECRLLevel} currentLevel - Niveau actuel
     * @param {readonly ExerciseResult[]} exerciseHistory - Historique des exercices
     * @returns {boolean} True si progression recommand√©e
     * @public
     */
    public shouldProgressToNextLevel(
        currentLevel: CECRLLevel,
        exerciseHistory: readonly ExerciseResult[]
    ): boolean {
        if (currentLevel === 'C2' || exerciseHistory.length < 10) {
            return false;
        }

        const levelInfo = this.getLevelDescription(currentLevel);
        if (!levelInfo) return false;

        const recentHistory = this.getRecentHistory(exerciseHistory, 50);
        const averageScore = this.calculateAverageScore(recentHistory);

        return averageScore >= levelInfo.recommendedProgressionScore;
    }

    /**
     * D√©termine si une r√©gression vers le niveau inf√©rieur est recommand√©e
     * 
     * @method shouldRegressToPreviousLevel
     * @param {CECRLLevel} currentLevel - Niveau actuel
     * @param {readonly ExerciseResult[]} exerciseHistory - Historique des exercices
     * @returns {boolean} True si r√©gression recommand√©e
     * @public
     */
    public shouldRegressToPreviousLevel(
        currentLevel: CECRLLevel,
        exerciseHistory: readonly ExerciseResult[]
    ): boolean {
        if (currentLevel === 'A1' || exerciseHistory.length < 15) {
            return false;
        }

        const levelInfo = this.getLevelDescription(currentLevel);
        if (!levelInfo) return false;

        const recentHistory = this.getRecentHistory(exerciseHistory, 50);
        const averageScore = this.calculateAverageScore(recentHistory);

        return averageScore < levelInfo.minimumScore;
    }

    // ==================== M√âTHODES PRIV√âES AVANC√âES ====================

    /**
     * D√©termine le niveau global bas√© sur l'analyse des comp√©tences
     */
    private determineOverallLevel(
        competencyAnalysis: Readonly<Record<string, CompetencyAnalysis>>
    ): CECRLLevel {
        const weightedScores: Record<string, number> = {};

        for (const [competencyId, analysis] of Object.entries(competencyAnalysis)) {
            const competency = this.lsfCompetencies.find(c => c.id === competencyId);
            if (competency) {
                weightedScores[analysis.level] = (weightedScores[analysis.level] || 0) +
                    (analysis.score * competency.weight);
            }
        }

        // Retourner le niveau avec le score pond√©r√© le plus √©lev√©
        const bestLevel = Object.entries(weightedScores).reduce((a, b) =>
            weightedScores[a[0]] > weightedScores[b[0]] ? a : b
        )[0];

        return (bestLevel as CECRLLevel) || 'A1';
    }

    /**
     * Calcule la progression dans le niveau actuel
     */
    private calculateProgressInLevel(
        level: CECRLLevel,
        competencyAnalysis: Readonly<Record<string, CompetencyAnalysis>>
    ): number {
        const analyses = Object.values(competencyAnalysis);
        if (analyses.length === 0) return 0;

        const averageProgress = analyses.reduce((sum, analysis) =>
            sum + analysis.progress, 0) / analyses.length;

        return Math.max(0, Math.min(1, averageProgress));
    }

    /**
     * Filtre les exercices par comp√©tence
     */
    private filterExercisesByCompetency(
        exerciseHistory: readonly ExerciseResult[],
        competency: LSFCompetencyArea
    ): readonly ExerciseResult[] {
        return exerciseHistory.filter(exercise => {
            if (!exercise.targetedSkills) return true; // Inclure tous si pas de ciblage sp√©cifique

            return exercise.targetedSkills.some(skill =>
                competency.relatedSkills.includes(skill)
            );
        });
    }

    /**
     * Analyse une comp√©tence sp√©cifique
     */
    private async analyzeSpecificCompetency(
        competency: LSFCompetencyArea,
        exercises: readonly ExerciseResult[]
    ): Promise<CompetencyAnalysis> {
        if (exercises.length === 0) {
            return {
                score: 0,
                level: 'A1',
                progress: 0,
                strengths: [],
                weaknesses: [competency.name],
                recommendations: [`Commencer la pratique en ${competency.name}`]
            };
        }

        const score = this.calculateAverageScore(exercises);
        const level = this.determineLevelFromScore(score);
        const progress = this.calculateProgressFromScore(score, level);

        return {
            score,
            level,
            progress,
            strengths: score > 0.7 ? [competency.name] : [],
            weaknesses: score < 0.5 ? [competency.name] : [],
            recommendations: this.generateCompetencyRecommendations(competency, score)
        };
    }

    /**
     * D√©termine le niveau √† partir d'un score
     */
    private determineLevelFromScore(score: number): CECRLLevel {
        // Parcourir les niveaux du plus √©lev√© au plus bas
        const reversedLevels = [...this.levels].reverse();
        for (const level of reversedLevels) {
            if (score >= level.minimumScore) {
                return level.id;
            }
        }
        return 'A1';
    }

    /**
     * Calcule la progression √† partir d'un score et niveau
     */
    private calculateProgressFromScore(score: number, level: CECRLLevel): number {
        const levelInfo = this.getLevelDescription(level);
        if (!levelInfo) return 0;

        const relativeProgress = (score - levelInfo.minimumScore) /
            (levelInfo.recommendedProgressionScore - levelInfo.minimumScore);

        return Math.max(0, Math.min(1, relativeProgress));
    }

    // ==================== M√âTHODES UTILITAIRES PRIV√âES ====================

    /**
     * R√©cup√®re la description d'un niveau CECRL
     */
    private getLevelDescription(levelId: CECRLLevel): CECRLLevelDescription | undefined {
        return this.levels.find(level => level.id === levelId);
    }

    /**
     * Obtient le niveau suivant
     */
    private getNextLevel(currentLevel: CECRLLevel): CECRLLevel {
        const levelOrder: readonly CECRLLevel[] = ['A1', 'A2', 'B1', 'B2', 'C1', 'C2'];
        const currentIndex = levelOrder.indexOf(currentLevel);

        if (currentIndex < 0 || currentIndex >= levelOrder.length - 1) {
            return currentLevel;
        }

        return levelOrder[currentIndex + 1];
    }

    /**
     * Obtient le niveau pr√©c√©dent
     */
    private getPreviousLevel(currentLevel: CECRLLevel): CECRLLevel {
        const levelOrder: readonly CECRLLevel[] = ['A1', 'A2', 'B1', 'B2', 'C1', 'C2'];
        const currentIndex = levelOrder.indexOf(currentLevel);

        if (currentIndex <= 0) {
            return currentLevel;
        }

        return levelOrder[currentIndex - 1];
    }

    /**
     * Calcule le score moyen des exercices
     */
    private calculateAverageScore(exerciseHistory: readonly ExerciseResult[]): number {
        if (exerciseHistory.length === 0) return 0;

        const totalScore = exerciseHistory.reduce((sum, result) => sum + result.score, 0);
        return totalScore / exerciseHistory.length;
    }

    /**
     * R√©cup√®re l'historique r√©cent
     */
    private getRecentHistory(
        exerciseHistory: readonly ExerciseResult[],
        maxCount: number
    ): readonly ExerciseResult[] {
        if (!exerciseHistory || exerciseHistory.length === 0) return [];
        return exerciseHistory.slice(-maxCount);
    }

    /**
     * Cr√©e une √©valuation vide
     */
    private createEmptyEvaluation(level: CECRLLevel): LevelEvaluation {
        return {
            currentLevel: level,
            recommendedLevel: level,
            levelChangeRecommended: false,
            progressInCurrentLevel: 0,
            scores: {},
            explanation: "Donn√©es insuffisantes pour une √©valuation compl√®te.",
            strengthAreas: [],
            weaknessAreas: []
        };
    }

    /**
     * Cr√©e une √©valuation d√©taill√©e vide
     */
    private createEmptyDetailedEvaluation(userId: string, level: CECRLLevel): DetailedEvaluationResult {
        return {
            currentLevel: level,
            recommendedLevel: level,
            levelChangeRecommended: false,
            progressInCurrentLevel: 0,
            scores: {},
            explanation: "Donn√©es insuffisantes pour une √©valuation compl√®te. Commencez par quelques exercices pour obtenir une √©valuation personnalis√©e.",
            strengthAreas: [],
            weaknessAreas: [],
            competencyAnalysis: {},
            predictions: [],
            recommendations: [
                'Commencer par des exercices de niveau A1',
                'Pratiquer r√©guli√®rement pour obtenir une √©valuation pr√©cise',
                'Explorer diff√©rents types d\'exercices LSF'
            ],
            estimatedProgressionTime: 0,
            evaluationConfidence: 0
        };
    }

    /**
     * Calcule les scores de base par comp√©tence
     */
    private calculateBasicSkillScores(
        exerciseHistory: readonly ExerciseResult[]
    ): Readonly<Record<string, number>> {
        const skillScores: Record<string, number> = {};
        const skillCounts: Record<string, number> = {};

        // Grouper par type d'exercice ou utiliser 'general' par d√©faut
        exerciseHistory.forEach(result => {
            const skillKey = result.type || 'general';

            if (!skillScores[skillKey]) {
                skillScores[skillKey] = 0;
                skillCounts[skillKey] = 0;
            }

            skillScores[skillKey] += result.score;
            skillCounts[skillKey] += 1;
        });

        // Calculer les moyennes
        Object.keys(skillScores).forEach(skill => {
            if (skillCounts[skill] > 0) {
                skillScores[skill] /= skillCounts[skill];
            }
        });

        return skillScores;
    }

    /**
     * Identifie les forces de base
     */
    private identifyBasicStrengths(skillScores: Readonly<Record<string, number>>): readonly string[] {
        return Object.entries(skillScores)
            .filter(([, score]) => score >= 0.75)
            .map(([skill]) => skill);
    }

    /**
     * Identifie les faiblesses de base
     */
    private identifyBasicWeaknesses(skillScores: Readonly<Record<string, number>>): readonly string[] {
        return Object.entries(skillScores)
            .filter(([, score]) => score < 0.5)
            .map(([skill]) => skill);
    }

    /**
     * G√©n√®re des recommandations pour une comp√©tence
     */
    private generateCompetencyRecommendations(
        competency: LSFCompetencyArea,
        score: number
    ): readonly string[] {
        const recommendations: string[] = [];

        if (score < 0.3) {
            recommendations.push(`Commencer par les bases en ${competency.name}`);
            recommendations.push('Pratiquer quotidiennement avec des exercices simples');
        } else if (score < 0.6) {
            recommendations.push(`Renforcer les acquis en ${competency.name}`);
            recommendations.push('Diversifier les types d\'exercices');
        } else if (score < 0.8) {
            recommendations.push(`Perfectionnement en ${competency.name}`);
            recommendations.push('Exercices de niveau avanc√©');
        } else {
            recommendations.push(`Maintenir l'excellence en ${competency.name}`);
            recommendations.push('Servir de mod√®le pour d\'autres apprenants');
        }

        return recommendations;
    }

    /**
     * D√©termine la difficult√© pour une comp√©tence
     */
    private determineDifficultyForCompetency(score: number): LearningPrediction['difficulty'] {
        if (score < 0.3) return 'easy';
        if (score < 0.6) return 'medium';
        if (score < 0.8) return 'hard';
        return 'expert';
    }

    /**
     * Estime le temps n√©cessaire pour une comp√©tence
     */
    private estimateTimeForCompetency(
        competency: LSFCompetencyArea,
        analysis: CompetencyAnalysis
    ): number {
        const baseTime = 30; // minutes de base
        const difficultyMultiplier = (1 - analysis.score) * 2; // Plus le score est bas, plus c'est long
        const competencyMultiplier = competency.weight; // Comp√©tences importantes prennent plus de temps

        return Math.round(baseTime * difficultyMultiplier * competencyMultiplier);
    }

    /**
     * Calcule la confiance dans une pr√©diction
     */
    private calculatePredictionConfidence(analysis: CompetencyAnalysis): number {
        // Plus le score est proche des extr√™mes, plus la confiance est √©lev√©e
        const scoreConfidence = analysis.score < 0.2 || analysis.score > 0.8 ? 0.9 : 0.7;
        return Math.min(1, scoreConfidence + analysis.progress * 0.1);
    }

    /**
     * Identifie les obstacles potentiels
     */
    private identifyPotentialObstacles(
        competency: LSFCompetencyArea,
        analysis: CompetencyAnalysis
    ): readonly string[] {
        const obstacles: string[] = [];

        if (analysis.score < 0.3) {
            obstacles.push('Bases insuffisantes');
            obstacles.push('Besoin de motivation suppl√©mentaire');
        }

        if (competency.id === 'grammar_lsf') {
            obstacles.push('Complexit√© des structures spatiales');
            obstacles.push('Diff√©rences avec la grammaire fran√ßaise');
        }

        if (competency.id === 'expression_lsf') {
            obstacles.push('Manque de confiance en soi');
            obstacles.push('Peur du jugement');
        }

        return obstacles;
    }

    /**
     * Sugg√®re des strat√©gies d'adaptation
     */
    private suggestAdaptationStrategies(
        competency: LSFCompetencyArea,
        analysis: CompetencyAnalysis
    ): readonly string[] {
        const strategies: string[] = [];

        if (analysis.score < 0.5) {
            strategies.push('Apprentissage progressif par √©tapes');
            strategies.push('R√©p√©tition espac√©e');
            strategies.push('Feedback positif r√©gulier');
        }

        if (competency.id === 'grammar_lsf') {
            strategies.push('Visualisation 3D des structures');
            strategies.push('Exercices pratiques spatiaux');
        }

        if (competency.id === 'vocabulary_lsf') {
            strategies.push('Associations visuelles');
            strategies.push('Cartes mentales LSF');
        }

        return strategies;
    }

    /**
     * Calcule la progression globale
     */
    private calculateOverallProgress(
        competencyAnalysis: Readonly<Record<string, CompetencyAnalysis>>
    ): number {
        const analyses = Object.values(competencyAnalysis);
        if (analyses.length === 0) return 0;

        return analyses.reduce((sum, analysis) => sum + analysis.progress, 0) / analyses.length;
    }

    /**
     * Estime le temps de progression global
     */
    private estimateOverallProgressionTime(currentLevel: CECRLLevel, overallProgress: number): number {
        const levelInfo = this.getLevelDescription(currentLevel);
        if (!levelInfo) return 60;

        const remainingProgress = 1 - overallProgress;
        const estimatedHours = levelInfo.recommendedDuration * remainingProgress;

        return Math.round(estimatedHours * 60); // Convertir en minutes
    }

    /**
     * G√©n√®re des recommandations g√©n√©rales
     */
    private generateRecommendations(
        competencyAnalysis: Readonly<Record<string, CompetencyAnalysis>>,
        currentLevel: CECRLLevel
    ): readonly string[] {
        const recommendations: string[] = [];
        const weakCompetencies = Object.entries(competencyAnalysis)
            .filter(([, analysis]) => analysis.score < 0.6)
            .map(([id]) => this.lsfCompetencies.find(c => c.id === id)?.name)
            .filter(Boolean) as string[];

        if (weakCompetencies.length > 0) {
            recommendations.push(`Concentrer les efforts sur : ${weakCompetencies.join(', ')}`);
        }

        recommendations.push('Pratiquer r√©guli√®rement avec des exercices vari√©s');
        recommendations.push('Interagir avec la communaut√© sourde pour l\'immersion culturelle');

        if (currentLevel === 'A1' || currentLevel === 'A2') {
            recommendations.push('Construire un vocabulaire de base solide');
        } else {
            recommendations.push('D√©velopper la fluidit√© et les nuances expressives');
        }

        return recommendations;
    }

    /**
     * Estime le temps de progression
     */
    private estimateProgressionTime(
        currentLevel: CECRLLevel,
        competencyAnalysis: Readonly<Record<string, CompetencyAnalysis>>
    ): number {
        const levelInfo = this.getLevelDescription(currentLevel);
        if (!levelInfo) return 60;

        const overallProgress = this.calculateOverallProgress(competencyAnalysis);
        const remainingTime = levelInfo.recommendedDuration * (1 - overallProgress);

        return Math.round(remainingTime * 60); // Convertir en minutes
    }

    /**
     * Calcule la confiance dans l'√©valuation
     */
    private calculateEvaluationConfidence(exerciseHistory: readonly ExerciseResult[]): number {
        if (exerciseHistory.length === 0) return 0;
        if (exerciseHistory.length < 5) return 0.3;
        if (exerciseHistory.length < 10) return 0.6;
        if (exerciseHistory.length < 20) return 0.8;
        return 0.95;
    }

    /**
     * D√©termine le niveau recommand√©
     */
    private determineRecommendedLevel(
        currentLevel: CECRLLevel,
        competencyAnalysis: Readonly<Record<string, CompetencyAnalysis>>,
        progressInCurrentLevel: number
    ): CECRLLevel {
        const overallScore = this.calculateOverallProgress(competencyAnalysis);

        // Progression recommand√©e si score √©lev√© dans toutes les comp√©tences
        if (overallScore > 0.8 && progressInCurrentLevel > 0.8) {
            return this.getNextLevel(currentLevel);
        }

        // R√©gression recommand√©e si score tr√®s faible
        if (overallScore < 0.3) {
            return this.getPreviousLevel(currentLevel);
        }

        return currentLevel;
    }

    /**
     * Extrait les scores de l'analyse
     */
    private extractScoresFromAnalysis(
        competencyAnalysis: Readonly<Record<string, CompetencyAnalysis>>
    ): Readonly<Record<string, number>> {
        const scores: Record<string, number> = {};

        for (const [competencyId, analysis] of Object.entries(competencyAnalysis)) {
            const competency = this.lsfCompetencies.find(c => c.id === competencyId);
            if (competency) {
                scores[competency.name] = analysis.score;
            }
        }

        return scores;
    }

    /**
     * G√©n√®re une explication d√©taill√©e
     */
    private generateExplanation(
        currentLevel: CECRLLevel,
        recommendedLevel: CECRLLevel,
        competencyAnalysis: Readonly<Record<string, CompetencyAnalysis>>
    ): string {
        const overallScore = this.calculateOverallProgress(competencyAnalysis);

        let explanation = `√âvaluation CECRL LSF - Niveau actuel : ${currentLevel}. `;

        if (currentLevel !== recommendedLevel) {
            explanation += `Niveau recommand√© : ${recommendedLevel}. `;
        }

        explanation += `Score global : ${Math.round(overallScore * 100)}%. `;

        const weakAreas = this.identifyWeaknessAreas(competencyAnalysis);
        if (weakAreas.length > 0) {
            explanation += `Domaines √† am√©liorer : ${weakAreas.join(', ')}. `;
        }

        const strongAreas = this.identifyStrengthAreas(competencyAnalysis);
        if (strongAreas.length > 0) {
            explanation += `Points forts : ${strongAreas.join(', ')}.`;
        }

        return explanation;
    }

    /**
     * Identifie les domaines de force
     */
    private identifyStrengthAreas(
        competencyAnalysis: Readonly<Record<string, CompetencyAnalysis>>
    ): readonly string[] {
        return Object.entries(competencyAnalysis)
            .filter(([, analysis]) => analysis.score >= 0.75)
            .map(([id]) => this.lsfCompetencies.find(c => c.id === id)?.name)
            .filter(Boolean) as string[];
    }

    /**
     * Identifie les domaines de faiblesse
     */
    private identifyWeaknessAreas(
        competencyAnalysis: Readonly<Record<string, CompetencyAnalysis>>
    ): readonly string[] {
        return Object.entries(competencyAnalysis)
            .filter(([, analysis]) => analysis.score < 0.5)
            .map(([id]) => this.lsfCompetencies.find(c => c.id === id)?.name)
            .filter(Boolean) as string[];
    }
}