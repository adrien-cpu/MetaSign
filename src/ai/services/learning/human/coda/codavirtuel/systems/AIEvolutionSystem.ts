/**
 * @file src/ai/services/learning/human/coda/codavirtuel/systems/AIEvolutionSystem.ts
 * @description Syst√®me r√©volutionnaire d'√©volution adaptatif pour IA-√©l√®ves avec apprentissage continu
 * 
 * Fonctionnalit√©s r√©volutionnaires :
 * - üß¨ √âvolution dynamique bas√©e sur l'exp√©rience d'apprentissage
 * - üéØ Adaptation comportementale intelligente
 * - üìä M√©triques d'√©volution multi-dimensionnelles
 * - üîÑ R√©troaction continue et auto-am√©lioration
 * - üå± Croissance cognitive et √©motionnelle
 * - üèÜ Syst√®me de r√©compenses et motivations √©volutives
 * 
 * @module AIEvolutionSystem
 * @version 3.0.0 - R√©volution CODA (Refactoris√©)
 * @since 2025
 * @author MetaSign Team - Evolutionary AI Division
 */

import { LoggerFactory } from '@/ai/utils/LoggerFactory';
import { EvolutionAlgorithmManager } from '@/ai/services/learning/human/coda/codavirtuel/algorithms/EvolutionAlgorithmManager';
import { EvolutionMetricsManager } from '@/ai/services/learning/human/coda/codavirtuel/metrics/EvolutionMetricsManager';
import { EvolutionPredictor } from '@/ai/services/learning/human/coda/codavirtuel/prediction/EvolutionPredictor';
import { EvolutionAnalyzer } from '@/ai/services/learning/human/coda/codavirtuel/analysis/EvolutionAnalyzer';

import type {
    EvolutionMetrics,
    EvolutionEvent,
    EvolutionFactors,
    EvolutionAnalysisResult,
    EvolutionPrediction,
    AIEvolutionSystemConfig,
    AIPersonalityProfile
} from '@/ai/services/learning/human/coda/codavirtuel/types/evolution.types';

/**
 * Syst√®me r√©volutionnaire d'√©volution adaptatif pour IA-√©l√®ves
 * 
 * @class AIEvolutionSystem
 * @description Orchestrateur principal qui coordonne tous les composants sp√©cialis√©s
 * du syst√®me d'√©volution. Utilise une architecture modulaire pour une maintenance
 * et une extensibilit√© optimales.
 * 
 * @example
 * ```typescript
 * const evolutionSystem = new AIEvolutionSystem({
 *   evolutionSensitivity: 0.7,
 *   enableAutoOptimization: true,
 *   baseEvolutionRate: 0.1
 * });
 * 
 * // Analyser l'√©volution
 * const analysis = await evolutionSystem.analyzeEvolution('student123', {
 *   recentExperiences: experiences,
 *   emotionalPatterns: patterns,
 *   memoryMetrics: metrics
 * });
 * 
 * // Appliquer l'√©volution
 * const newMetrics = await evolutionSystem.evolveStudent('student123', factors);
 * ```
 */
export class AIEvolutionSystem {
    /**
     * Logger pour le syst√®me d'√©volution
     * @private
     * @readonly
     */
    private readonly logger = LoggerFactory.getLogger('AIEvolutionSystem_v3_Refactored');

    /**
     * Configuration du syst√®me
     * @private
     * @readonly
     */
    private readonly config: AIEvolutionSystemConfig;

    /**
     * Gestionnaire des algorithmes d'√©volution
     * @private
     * @readonly
     */
    private readonly algorithmManager: EvolutionAlgorithmManager;

    /**
     * Gestionnaire des m√©triques d'√©volution
     * @private
     * @readonly
     */
    private readonly metricsManager: EvolutionMetricsManager;

    /**
     * Pr√©dicteur d'√©volution
     * @private
     * @readonly
     */
    private readonly predictor: EvolutionPredictor;

    /**
     * Analyseur d'√©volution
     * @private
     * @readonly
     */
    private readonly analyzer: EvolutionAnalyzer;

    /**
     * Historique des √©v√©nements d'√©volution par IA-√©l√®ve
     * @private
     */
    private readonly evolutionHistory: Map<string, EvolutionEvent[]> = new Map();

    /**
     * Cache des analyses r√©centes
     * @private
     */
    private readonly analysisCache: Map<string, { result: EvolutionAnalysisResult; timestamp: Date }> = new Map();

    /**
     * Dur√©e de validit√© du cache d'analyse en millisecondes (15 minutes)
     * @private
     * @readonly
     */
    private readonly analysisCacheValidityMs = 15 * 60 * 1000;

    /**
     * Intervalle de traitement automatique en millisecondes (5 minutes)
     * @private
     * @readonly
     */
    private readonly autoProcessingIntervalMs = 5 * 60 * 1000;

    /**
     * Timer pour le traitement automatique
     * @private
     */
    private autoProcessingTimer?: NodeJS.Timeout;

    /**
     * Constructeur du syst√®me d'√©volution
     * 
     * @constructor
     * @param {Partial<AIEvolutionSystemConfig>} [config] - Configuration optionnelle
     */
    constructor(config?: Partial<AIEvolutionSystemConfig>) {
        this.config = {
            evolutionSensitivity: 0.6,
            baseEvolutionRate: 0.05,
            evolutionThreshold: 0.1,
            changePersistence: 0.8,
            enableAutoOptimization: true,
            analysisDepth: 20,
            ...config
        };

        // Initialiser les composants sp√©cialis√©s
        this.algorithmManager = new EvolutionAlgorithmManager();
        this.metricsManager = new EvolutionMetricsManager();
        this.predictor = new EvolutionPredictor();
        this.analyzer = new EvolutionAnalyzer();

        // D√©marrer le traitement automatique si activ√©
        if (this.config.enableAutoOptimization) {
            this.startAutoProcessing();
        }

        this.logger.info('üß¨ Syst√®me d\'√©volution r√©volutionnaire initialis√© (Version Refactoris√©e)', {
            config: this.config,
            componentsLoaded: ['AlgorithmManager', 'MetricsManager', 'Predictor', 'Analyzer']
        });
    }

    /**
     * Analyse l'√©volution actuelle d'un √©tudiant
     * 
     * @method analyzeEvolution
     * @async
     * @param {string} studentId - ID de l'IA-√©l√®ve
     * @param {EvolutionFactors} factors - Facteurs d'√©volution
     * @returns {Promise<EvolutionAnalysisResult>} R√©sultat d'analyse
     * @public
     */
    public async analyzeEvolution(
        studentId: string,
        factors: EvolutionFactors
    ): Promise<EvolutionAnalysisResult> {
        try {
            this.logger.info('üî¨ D√©but analyse √©volution IA-√©l√®ve', {
                studentId,
                experiencesCount: factors.recentExperiences.length,
                patternsCount: factors.emotionalPatterns.length
            });

            // V√©rifier le cache d'analyse
            const cachedAnalysis = this.getCachedAnalysis(studentId);
            if (cachedAnalysis) {
                this.logger.debug('Utilisation cache analyse', { studentId });
                return cachedAnalysis;
            }

            // Obtenir les m√©triques actuelles
            const currentMetrics = this.metricsManager.getStudentMetrics(studentId) ||
                this.metricsManager.updateStudentMetrics(studentId, {}, 'Initialisation');

            // Obtenir l'historique d'√©volution
            const history = this.getEvolutionHistory(studentId);

            // G√©n√©rer des pr√©dictions
            const predictions = await this.predictor.predictEvolution(
                studentId,
                currentMetrics,
                history,
                { timeHorizon: 24, confidenceThreshold: 0.6 }
            );

            // Effectuer l'analyse compl√®te
            const analysisResult = await this.analyzer.analyzeEvolution(
                studentId,
                currentMetrics,
                history,
                factors,
                predictions
            );

            // Mettre en cache le r√©sultat
            this.cacheAnalysisResult(studentId, analysisResult);

            this.logger.info('‚ú® Analyse √©volution termin√©e', {
                studentId,
                overallScore: analysisResult.overallEvolutionScore.toFixed(3),
                predictionsCount: predictions.length,
                recommendationsCount: analysisResult.improvementRecommendations.length
            });

            return analysisResult;
        } catch (error) {
            this.logger.error('‚ùå Erreur analyse √©volution', { studentId, error });
            throw error;
        }
    }

    /**
     * Fait √©voluer un √©tudiant bas√© sur les facteurs fournis
     * 
     * @method evolveStudent
     * @async
     * @param {string} studentId - ID de l'IA-√©l√®ve
     * @param {EvolutionFactors} factors - Facteurs d'√©volution
     * @returns {Promise<EvolutionMetrics>} Nouvelles m√©triques d'√©volution
     * @public
     */
    public async evolveStudent(
        studentId: string,
        factors: EvolutionFactors
    ): Promise<EvolutionMetrics> {
        try {
            this.logger.info('üöÄ √âvolution IA-√©l√®ve d√©clench√©e', { studentId });

            // Obtenir les m√©triques actuelles
            const currentMetrics = this.metricsManager.getStudentMetrics(studentId) ||
                this.metricsManager.updateStudentMetrics(studentId, {}, 'Initialisation √©volution');

            // D√©tecter les √©v√©nements d'√©volution potentiels
            const potentialEvents = this.algorithmManager.detectEvolutionEvents(currentMetrics, factors);

            // Filtrer selon les seuils de configuration
            const significantEvents = potentialEvents.filter(
                event => event.impact >= this.config.evolutionThreshold
            );

            this.logger.debug('√âv√©nements d\'√©volution d√©tect√©s', {
                studentId,
                potentialEvents: potentialEvents.length,
                significantEvents: significantEvents.length
            });

            let updatedMetrics = currentMetrics;

            // Appliquer chaque √©v√©nement d'√©volution significatif
            for (const event of significantEvents) {
                updatedMetrics = this.metricsManager.applyEvolutionEvent(studentId, event);
                this.recordEvolutionEvent(studentId, event);
            }

            // Appliquer l'√©volution graduelle
            updatedMetrics = this.metricsManager.applyGradualEvolution(
                studentId,
                factors,
                this.config.baseEvolutionRate
            );

            // Invalider le cache d'analyse pour ce student
            this.invalidateAnalysisCache(studentId);

            this.logger.info('üéØ √âvolution appliqu√©e avec succ√®s', {
                studentId,
                eventsApplied: significantEvents.length,
                finalScore: this.calculateQuickScore(updatedMetrics)
            });

            return updatedMetrics;
        } catch (error) {
            this.logger.error('‚ùå Erreur √©volution √©tudiant', { studentId, error });
            throw error;
        }
    }

    /**
     * Obtient les m√©triques d'√©volution actuelles
     * 
     * @method getEvolutionMetrics
     * @param {string} studentId - ID de l'IA-√©l√®ve
     * @returns {EvolutionMetrics | undefined} M√©triques d'√©volution
     * @public
     */
    public getEvolutionMetrics(studentId: string): EvolutionMetrics | undefined {
        return this.metricsManager.getStudentMetrics(studentId);
    }

    /**
     * Obtient l'historique d'√©volution
     * 
     * @method getEvolutionHistory
     * @param {string} studentId - ID de l'IA-√©l√®ve
     * @returns {readonly EvolutionEvent[]} Historique d'√©volution
     * @public
     */
    public getEvolutionHistory(studentId: string): readonly EvolutionEvent[] {
        return this.evolutionHistory.get(studentId) || [];
    }

    /**
     * Enregistre un profil de personnalit√©
     * 
     * @method registerPersonalityProfile
     * @param {string} studentId - ID de l'IA-√©l√®ve
     * @param {AIPersonalityProfile} profile - Profil de personnalit√©
     * @returns {void}
     * @public
     */
    public registerPersonalityProfile(studentId: string, profile: AIPersonalityProfile): void {
        this.metricsManager.registerPersonalityProfile(studentId, profile);
        this.logger.debug('üìã Profil personnalit√© enregistr√©', { studentId });
    }

    /**
     * Pr√©dit l'√©volution future bas√©e sur les tendances actuelles
     * 
     * @method predictFutureEvolution
     * @async
     * @param {string} studentId - ID de l'IA-√©l√®ve
     * @param {number} timeHorizon - Horizon temporel (en heures)
     * @returns {Promise<readonly EvolutionPrediction[]>} Pr√©dictions d'√©volution
     * @public
     */
    public async predictFutureEvolution(
        studentId: string,
        timeHorizon: number
    ): Promise<readonly EvolutionPrediction[]> {
        try {
            const currentMetrics = this.metricsManager.getStudentMetrics(studentId);
            const history = this.getEvolutionHistory(studentId);

            if (!currentMetrics || history.length < 3) {
                this.logger.warn('Donn√©es insuffisantes pour pr√©dictions', {
                    studentId,
                    hasMetrics: !!currentMetrics,
                    historyLength: history.length
                });
                return [];
            }

            return await this.predictor.predictEvolution(
                studentId,
                currentMetrics,
                history,
                { timeHorizon, confidenceThreshold: 0.5 }
            );
        } catch (error) {
            this.logger.error('‚ùå Erreur pr√©diction √©volution', { studentId, error });
            return [];
        }
    }

    /**
     * R√©initialise compl√®tement l'√©volution d'un √©tudiant
     * 
     * @method resetStudentEvolution
     * @param {string} studentId - ID de l'IA-√©l√®ve
     * @param {string} [reason] - Raison de la r√©initialisation
     * @returns {EvolutionMetrics} Nouvelles m√©triques initiales
     * @public
     */
    public resetStudentEvolution(studentId: string, reason?: string): EvolutionMetrics {
        this.logger.info('üîÑ R√©initialisation √©volution √©tudiant', { studentId, reason });

        // R√©initialiser les m√©triques
        const newMetrics = this.metricsManager.resetStudentMetrics(studentId, reason);

        // Archiver l'historique existant
        const currentHistory = this.evolutionHistory.get(studentId);
        if (currentHistory && currentHistory.length > 0) {
            this.logger.debug('Archivage historique existant', {
                studentId,
                eventsArchived: currentHistory.length
            });
        }

        // R√©initialiser l'historique
        this.evolutionHistory.set(studentId, []);

        // Invalider le cache
        this.invalidateAnalysisCache(studentId);

        return newMetrics;
    }

    /**
     * Obtient les statistiques globales du syst√®me
     * 
     * @method getSystemStatistics
     * @returns {Record<string, unknown>} Statistiques du syst√®me
     * @public
     */
    public getSystemStatistics(): Record<string, unknown> {
        const totalStudents = this.evolutionHistory.size;
        const totalEvents = Array.from(this.evolutionHistory.values())
            .reduce((sum, events) => sum + events.length, 0);

        const cacheHitRate = this.analysisCache.size > 0 ?
            (this.analysisCache.size / Math.max(totalStudents, 1)) : 0;

        return {
            totalStudents,
            totalEvents,
            cacheHitRate: cacheHitRate.toFixed(2),
            autoProcessingEnabled: this.config.enableAutoOptimization,
            componentStatus: {
                algorithmManager: 'active',
                metricsManager: 'active',
                predictor: 'active',
                analyzer: 'active'
            }
        };
    }

    /**
     * Arr√™te le syst√®me et nettoie les ressources
     * 
     * @method shutdown
     * @returns {void}
     * @public
     */
    public shutdown(): void {
        this.logger.info('üõë Arr√™t du syst√®me d\'√©volution');

        // Arr√™ter le traitement automatique
        if (this.autoProcessingTimer) {
            clearInterval(this.autoProcessingTimer);
            this.autoProcessingTimer = undefined;
        }

        // Nettoyer les caches
        this.analysisCache.clear();

        this.logger.info('‚úÖ Syst√®me d\'√©volution arr√™t√© proprement');
    }

    // ================== M√âTHODES PRIV√âES ==================

    /**
     * D√©marre le traitement automatique d'√©volution
     * @private
     */
    private startAutoProcessing(): void {
        this.autoProcessingTimer = setInterval(() => {
            this.processAutoEvolution();
        }, this.autoProcessingIntervalMs);

        this.logger.info('‚öôÔ∏è Traitement automatique d\'√©volution d√©marr√©', {
            intervalMinutes: this.autoProcessingIntervalMs / (60 * 1000)
        });
    }

    /**
     * Traite l'√©volution automatique pour tous les √©tudiants
     * @private
     */
    private processAutoEvolution(): void {
        try {
            const studentIds = Array.from(this.evolutionHistory.keys());

            this.logger.debug('üîÑ D√©but traitement automatique √©volution', {
                studentsCount: studentIds.length
            });

            for (const studentId of studentIds) {
                this.processStudentAutoEvolution(studentId);
            }

            // Nettoyer les caches obsol√®tes
            this.cleanupExpiredCaches();

        } catch (error) {
            this.logger.error('‚ùå Erreur traitement automatique', { error });
        }
    }

    /**
     * Traite l'√©volution automatique pour un √©tudiant sp√©cifique
     * @private
     */
    private processStudentAutoEvolution(studentId: string): void {
        try {
            const currentMetrics = this.metricsManager.getStudentMetrics(studentId);
            if (!currentMetrics) {
                return;
            }

            // Appliquer une micro-√©volution bas√©e sur le temps
            const microEvolutionFactors = this.createMicroEvolutionFactors(studentId);

            if (microEvolutionFactors) {
                this.metricsManager.applyGradualEvolution(
                    studentId,
                    microEvolutionFactors,
                    this.config.baseEvolutionRate * 0.1 // Micro-√©volution plus faible
                );
            }

        } catch (error) {
            this.logger.error('‚ùå Erreur √©volution automatique √©tudiant', { studentId, error });
        }
    }

    /**
     * Cr√©e des facteurs de micro-√©volution pour le traitement automatique
     * @private
     */
    private createMicroEvolutionFactors(studentId: string): EvolutionFactors | null {
        const history = this.getEvolutionHistory(studentId);

        if (history.length === 0) {
            return null;
        }

        // Simuler des facteurs minimaux pour la micro-√©volution
        return {
            recentExperiences: [],
            emotionalPatterns: [],
            memoryMetrics: {
                strongestConcepts: [],
                weakestConcepts: [],
                retentionRate: 0.5,
                comprehensionSpeed: 0.5
            },
            socialInteractions: [],
            feedbackHistory: [],
            totalLearningTime: 100 // Temps minimal simul√©
        };
    }

    /**
     * Enregistre un √©v√©nement d'√©volution dans l'historique
     * @private
     */
    private recordEvolutionEvent(studentId: string, event: EvolutionEvent): void {
        if (!this.evolutionHistory.has(studentId)) {
            this.evolutionHistory.set(studentId, []);
        }

        const history = this.evolutionHistory.get(studentId)!;
        history.push(event);

        // Limiter la taille de l'historique selon la configuration
        if (history.length > this.config.analysisDepth * 3) {
            this.evolutionHistory.set(studentId, history.slice(-this.config.analysisDepth * 2));
        }

        this.logger.debug('√âv√©nement √©volution enregistr√©', {
            studentId,
            eventType: event.eventType,
            impact: event.impact,
            historySize: history.length
        });
    }

    /**
     * Obtient une analyse en cache si elle est valide
     * @private
     */
    private getCachedAnalysis(studentId: string): EvolutionAnalysisResult | null {
        const cached = this.analysisCache.get(studentId);

        if (!cached) {
            return null;
        }

        const isExpired = Date.now() - cached.timestamp.getTime() > this.analysisCacheValidityMs;

        if (isExpired) {
            this.analysisCache.delete(studentId);
            return null;
        }

        return cached.result;
    }

    /**
     * Met en cache un r√©sultat d'analyse
     * @private
     */
    private cacheAnalysisResult(studentId: string, result: EvolutionAnalysisResult): void {
        this.analysisCache.set(studentId, {
            result,
            timestamp: new Date()
        });

        this.logger.debug('R√©sultat analyse mis en cache', { studentId });
    }

    /**
     * Invalide le cache d'analyse pour un √©tudiant
     * @private
     */
    private invalidateAnalysisCache(studentId: string): void {
        if (this.analysisCache.has(studentId)) {
            this.analysisCache.delete(studentId);
            this.logger.debug('Cache analyse invalid√©', { studentId });
        }
    }

    /**
     * Nettoie les caches expir√©s
     * @private
     */
    private cleanupExpiredCaches(): void {
        const now = Date.now();
        const expiredStudents: string[] = [];

        this.analysisCache.forEach((cached, studentId) => {
            if (now - cached.timestamp.getTime() > this.analysisCacheValidityMs) {
                expiredStudents.push(studentId);
            }
        });

        expiredStudents.forEach(studentId => {
            this.analysisCache.delete(studentId);
        });

        if (expiredStudents.length > 0) {
            this.logger.debug('Caches expir√©s nettoy√©s', {
                cleanedCount: expiredStudents.length
            });
        }
    }

    /**
     * Calcule un score rapide pour les m√©triques
     * @private
     */
    private calculateQuickScore(metrics: EvolutionMetrics): number {
        const values = Object.values(metrics);
        const average = values.reduce((sum, val) => sum + val, 0) / values.length;
        return Math.round(average * 1000) / 1000; // Arrondir √† 3 d√©cimales
    }

    /**
     * Valide la configuration du syst√®me
     * @private
     */
    private validateConfig(): void {
        const { evolutionSensitivity, baseEvolutionRate, evolutionThreshold } = this.config;

        if (evolutionSensitivity < 0 || evolutionSensitivity > 1) {
            throw new Error('evolutionSensitivity doit √™tre entre 0 et 1');
        }

        if (baseEvolutionRate < 0 || baseEvolutionRate > 1) {
            throw new Error('baseEvolutionRate doit √™tre entre 0 et 1');
        }

        if (evolutionThreshold < 0 || evolutionThreshold > 1) {
            throw new Error('evolutionThreshold doit √™tre entre 0 et 1');
        }

        this.logger.debug('Configuration valid√©e avec succ√®s');
    }

    /**
     * Exporte l'√©tat complet d'un √©tudiant pour sauvegarde
     * 
     * @method exportStudentState
     * @param {string} studentId - ID de l'IA-√©l√®ve
     * @returns {Record<string, unknown> | null} √âtat export√© ou null
     * @public
     */
    public exportStudentState(studentId: string): Record<string, unknown> | null {
        const metrics = this.metricsManager.getStudentMetrics(studentId);
        const history = this.getEvolutionHistory(studentId);
        const metricsHistory = this.metricsManager.getMetricsHistory(studentId);

        if (!metrics) {
            return null;
        }

        return {
            studentId,
            currentMetrics: metrics,
            evolutionHistory: history,
            metricsHistory,
            exportTimestamp: new Date().toISOString(),
            systemVersion: '3.0.0'
        };
    }

    /**
     * Importe l'√©tat d'un √©tudiant depuis une sauvegarde
     * 
     * @method importStudentState
     * @param {Record<string, unknown>} state - √âtat √† importer
     * @returns {boolean} Succ√®s de l'importation
     * @public
     */
    public importStudentState(state: Record<string, unknown>): boolean {
        try {
            const studentId = state.studentId as string;
            const currentMetrics = state.currentMetrics as EvolutionMetrics;
            const evolutionHistory = state.evolutionHistory as EvolutionEvent[];

            if (!studentId || !currentMetrics) {
                this.logger.error('√âtat invalide pour importation', { state });
                return false;
            }

            // Restaurer les m√©triques
            this.metricsManager.updateStudentMetrics(studentId, currentMetrics, 'Importation √©tat');

            // Restaurer l'historique
            this.evolutionHistory.set(studentId, evolutionHistory || []);

            this.logger.info('√âtat √©tudiant import√© avec succ√®s', {
                studentId,
                historyEvents: evolutionHistory?.length || 0
            });

            return true;
        } catch (error) {
            this.logger.error('‚ùå Erreur importation √©tat √©tudiant', { error });
            return false;
        }
    }

    /**
     * G√©n√®re un rapport de sant√© du syst√®me
     * 
     * @method generateHealthReport
     * @returns {Record<string, unknown>} Rapport de sant√©
     * @public
     */
    public generateHealthReport(): Record<string, unknown> {
        const stats = this.getSystemStatistics();
        const memoryUsage = process.memoryUsage();

        return {
            timestamp: new Date().toISOString(),
            systemStatus: 'healthy',
            statistics: stats,
            memoryUsage: {
                heapUsed: Math.round(memoryUsage.heapUsed / 1024 / 1024) + ' MB',
                heapTotal: Math.round(memoryUsage.heapTotal / 1024 / 1024) + ' MB'
            },
            configuration: this.config,
            componentHealth: {
                algorithmManager: 'operational',
                metricsManager: 'operational',
                predictor: 'operational',
                analyzer: 'operational',
                autoProcessing: this.autoProcessingTimer ? 'active' : 'inactive'
            }
        };
    }
}