/**
 * @file src/ai/services/learning/human/coda/codavirtuel/systems/examples/EmotionalSystemExamples.ts
 * @description Exemples pratiques et cas d'usage du syst√®me √©motionnel r√©volutionnaire
 * 
 * Contient des exemples complets pour :
 * - üéì Int√©gration dans un cours LSF
 * - ü§ñ Cr√©ation d'IA-√©l√®ves personnalis√©es
 * - üìä Analyse de progression √©motionnelle
 * - üéÆ Int√©gration avec syst√®mes de gamification
 * - üè• Applications th√©rapeutiques
 * - üî¨ √âtudes de recherche
 * 
 * @module EmotionalSystemExamples
 * @version 3.0.0 - R√©volution CODA
 * @since 2025
 * @author MetaSign Team - Examples & Integration Division
 */

import {
    AIEmotionalSystem,
    createEmotionalSystem,
    EmotionalConfigFactory,
    PRESET_CONFIGS
} from '../index';

import { AIPersonalitySystem } from '../AIPersonalitySystem';

import type {
    EmotionGenerationParams,
    CompleteEmotionalAnalysis,
    EmotionalState,
    PrimaryEmotion
} from '../types/EmotionalTypes';

import type {
    AIPersonalityProfile,
    InteractionData,
    LearningStyle,
    MotivationFactor
} from '../AIPersonalitySystem';

/**
 * Exemple 1 : Int√©gration compl√®te dans un cours LSF
 * 
 * @class LSFCourseIntegrationExample
 * @description Montre comment int√©grer le syst√®me √©motionnel dans
 * un cours complet de LSF avec suivi personnalis√©.
 */
export class LSFCourseIntegrationExample {
    private readonly emotionalSystem: AIEmotionalSystem;
    private readonly personalitySystem: AIPersonalitySystem;

    constructor() {
        // Configuration adapt√©e pour cours LSF standard
        const config = EmotionalConfigFactory.createForContext('intermediate_adaptive');
        this.emotionalSystem = createEmotionalSystem(config.systemConfig);
        this.personalitySystem = new AIPersonalitySystem();
    }

    /**
     * D√©monstration compl√®te d'un cours LSF
     */
    public async demonstrateCompleteLSFCourse(): Promise<void> {
        console.log('üéì === EXEMPLE : Cours LSF Complet avec Syst√®me √âmotionnel ===\n');

        // 1. Cr√©ation de plusieurs IA-√©l√®ves avec profils diff√©rents
        const students = await this.createDiverseStudentProfiles();

        // 2. Simulation d'une le√ßon avec exercices vari√©s
        await this.simulateCompleteLesson(students);

        // 3. Analyse des r√©sultats et recommandations
        await this.analyzeAndProvideRecommendations(students);
    }

    /**
     * Cr√©e des profils d'√©tudiants diversifi√©s
     */
    private async createDiverseStudentProfiles(): Promise<string[]> {
        const students = [
            'marie_debutante',
            'alex_intermediaire',
            'jordan_avance',
            'sam_tdah',
            'taylor_autiste'
        ];

        // Marie - D√©butante anxieuse
        const marieProfile = this.personalitySystem.createInitialProfile('marie_debutante', {
            bigFiveTraits: {
                openness: 0.6,
                conscientiousness: 0.8,
                extraversion: 0.3,     // Introvertie
                agreeableness: 0.9,
                neuroticism: 0.7       // Anxieuse
            },
            learningStyle: 'visual',
            motivationFactors: ['achievement', 'helping_others'],
            stressThreshold: 0.4,      // Seuil bas
            culturalBackground: 'hearing_family',
            preferredFeedbackStyle: 'positive_reinforcement'
        });

        // Alex - Interm√©diaire √©quilibr√©
        const alexProfile = this.personalitySystem.createInitialProfile('alex_intermediaire', {
            bigFiveTraits: {
                openness: 0.7,
                conscientiousness: 0.6,
                extraversion: 0.7,     // Extraverti
                agreeableness: 0.6,
                neuroticism: 0.4       // Stable
            },
            learningStyle: 'kinesthetic',
            motivationFactors: ['mastery', 'social_interaction'],
            stressThreshold: 0.7,
            culturalBackground: 'mixed_background',
            preferredFeedbackStyle: 'constructive_criticism'
        });

        // Jordan - Avanc√© perfectionniste
        const jordanProfile = this.personalitySystem.createInitialProfile('jordan_avance', {
            bigFiveTraits: {
                openness: 0.9,
                conscientiousness: 0.9,  // Tr√®s consciencieux
                extraversion: 0.5,
                agreeableness: 0.5,
                neuroticism: 0.3         // Tr√®s stable
            },
            learningStyle: 'analytical',
            motivationFactors: ['mastery', 'challenge', 'recognition'],
            stressThreshold: 0.8,
            culturalBackground: 'deaf_community',
            preferredFeedbackStyle: 'detailed_analysis'
        });

        // Enregistrer les profils
        this.emotionalSystem.registerPersonalityProfile('marie_debutante', marieProfile);
        this.emotionalSystem.registerPersonalityProfile('alex_intermediaire', alexProfile);
        this.emotionalSystem.registerPersonalityProfile('jordan_avance', jordanProfile);

        console.log('üë• Profils d\'√©tudiants cr√©√©s :');
        console.log('- Marie : D√©butante anxieuse (famille entendante)');
        console.log('- Alex : Interm√©diaire √©quilibr√© (contexte mixte)');
        console.log('- Jordan : Avanc√© perfectionniste (communaut√© sourde)');
        console.log('');

        return students.slice(0, 3); // Pour cet exemple, on utilise 3 √©tudiants
    }

    /**
     * Simule une le√ßon compl√®te avec exercices vari√©s
     */
    private async simulateCompleteLesson(students: string[]): Promise<void> {
        console.log('üìö === SIMULATION LE√áON : "Les Salutations en LSF" ===\n');

        const exercises = [
            {
                name: 'Reconnaissance des signes de base',
                difficulty: 'easy',
                type: 'recognition'
            },
            {
                name: 'Production de salutations formelles',
                difficulty: 'medium',
                type: 'production'
            },
            {
                name: 'Conversation contextuelle',
                difficulty: 'hard',
                type: 'conversation'
            }
        ];

        for (const exercise of exercises) {
            console.log(`\nüéØ Exercice : ${exercise.name}`);
            console.log(`   Difficult√© : ${exercise.difficulty}`);
            console.log('');

            for (const studentId of students) {
                await this.simulateExerciseForStudent(studentId, exercise);
            }
        }
    }

    /**
     * Simule un exercice pour un √©tudiant sp√©cifique
     */
    private async simulateExerciseForStudent(
        studentId: string,
        exercise: { name: string; difficulty: string; type: string }
    ): Promise<void> {
        // Simuler diff√©rents r√©sultats selon le profil
        const profile = this.emotionalSystem.getCurrentEmotionalState(studentId);
        let outcome: 'success' | 'partial' | 'failure';
        let stimulusIntensity: number;

        // Adapter les r√©sultats selon le niveau et la personnalit√©
        if (studentId === 'marie_debutante') {
            outcome = exercise.difficulty === 'easy' ? 'success' :
                exercise.difficulty === 'medium' ? 'partial' : 'failure';
            stimulusIntensity = exercise.difficulty === 'hard' ? 0.9 : 0.6;
        } else if (studentId === 'alex_intermediaire') {
            outcome = exercise.difficulty === 'hard' ? 'partial' : 'success';
            stimulusIntensity = 0.7;
        } else { // jordan_avance
            outcome = 'success';
            stimulusIntensity = exercise.difficulty === 'easy' ? 0.4 : 0.8;
        }

        const params: EmotionGenerationParams = {
            learningContext: `lsf_greetings_${exercise.type}`,
            stimulus: `${exercise.name.toLowerCase().replace(/\s+/g, '_')}_${outcome}`,
            stimulusIntensity,
            learningOutcome: outcome,
            contextualFactors: [exercise.difficulty, exercise.type, 'group_learning']
        };

        const emotionalState = await this.emotionalSystem.generateEmotionalState(studentId, params);

        // Afficher le r√©sultat
        const studentName = studentId.split('_')[0];
        const emotionEmoji = this.getEmotionEmoji(emotionalState.primaryEmotion);
        const outcomeEmoji = outcome === 'success' ? '‚úÖ' : outcome === 'partial' ? 'üü°' : '‚ùå';

        console.log(`   ${studentName.padEnd(10)} ${outcomeEmoji} ${emotionEmoji} ${emotionalState.primaryEmotion} (${emotionalState.intensity.toFixed(2)})`);
    }

    /**
     * Analyse les r√©sultats et fournit des recommandations
     */
    private async analyzeAndProvideRecommendations(students: string[]): Promise<void> {
        console.log('\nüìä === ANALYSE DES R√âSULTATS ET RECOMMANDATIONS ===\n');

        for (const studentId of students) {
            const analysis = await this.emotionalSystem.performCompleteAnalysis(studentId);
            const studentName = studentId.split('_')[0];

            console.log(`üë§ Analyse pour ${studentName} :`);
            console.log(`   √âtat actuel : ${analysis.currentState.primaryEmotion} (intensit√©: ${analysis.currentState.intensity.toFixed(2)})`);
            console.log(`   Patterns d√©tect√©s : ${analysis.patterns.length}`);
            console.log(`   Confiance analyse : ${(analysis.confidence * 100).toFixed(0)}%`);

            console.log('   Recommandations :');
            analysis.recommendations.forEach((rec, index) => {
                console.log(`   ${index + 1}. ${rec}`);
            });

            // Afficher les patterns d√©tect√©s
            if (analysis.patterns.length > 0) {
                console.log('   Patterns √©motionnels :');
                analysis.patterns.forEach(pattern => {
                    console.log(`   - ${pattern.type} : ${pattern.sequence.join(' ‚Üí ')} (${pattern.frequency}x)`);
                });
            }

            console.log('');
        }

        // Statistiques globales
        const stats = this.emotionalSystem.getSystemStatistics();
        console.log('üìà Statistiques de la session :');
        console.log(`   √âtudiants actifs : ${stats.totalActiveStudents}`);
        console.log(`   Distribution √©motionnelle :`, stats.currentEmotionDistribution);
    }

    /**
     * Obtient un emoji pour une √©motion
     */
    private getEmotionEmoji(emotion: PrimaryEmotion): string {
        const emojiMap: Record<PrimaryEmotion, string> = {
            'joy': 'üòä',
            'sadness': 'üò¢',
            'anger': 'üò†',
            'fear': 'üò∞',
            'surprise': 'üò≤',
            'disgust': 'üòñ',
            'trust': 'üòå',
            'anticipation': 'ü§î'
        };
        return emojiMap[emotion] || 'üòê';
    }
}

/**
 * Exemple 2 : Syst√®me d'adaptation en temps r√©el
 * 
 * @class RealTimeAdaptationExample
 * @description Montre comment adapter l'enseignement en temps r√©el
 * bas√© sur l'√©tat √©motionnel de l'IA-√©l√®ve.
 */
export class RealTimeAdaptationExample {
    private readonly emotionalSystem: AIEmotionalSystem;

    constructor() {
        // Configuration pour adaptation rapide
        const config = EmotionalConfigFactory.createForContext('intensive_bootcamp');
        this.emotionalSystem = createEmotionalSystem(config.systemConfig);
    }

    /**
     * D√©montre l'adaptation en temps r√©el
     */
    public async demonstrateRealTimeAdaptation(): Promise<void> {
        console.log('\n‚ö° === EXEMPLE : Adaptation en Temps R√©el ===\n');

        const studentId = 'realtime_student';

        // Cr√©er un √©tudiant avec tendance √† la frustration
        await this.createFrustrationProneStudent(studentId);

        // Simuler une s√©rie d'exercices avec adaptation
        await this.simulateAdaptiveExerciseSeries(studentId);
    }

    /**
     * Cr√©e un √©tudiant enclin √† la frustration
     */
    private async createFrustrationProneStudent(studentId: string): Promise<void> {
        // Premier exercice difficile qui g√©n√®re de la frustration
        const frustrationParams: EmotionGenerationParams = {
            learningContext: 'complex_grammar_exercise',
            stimulus: 'repeated_failure_difficult_concept',
            stimulusIntensity: 0.9,
            learningOutcome: 'failure',
            contextualFactors: ['time_pressure', 'complex_material', 'third_attempt']
        };

        const initialState = await this.emotionalSystem.generateEmotionalState(studentId, frustrationParams);
        console.log(`üò§ √âtat initial : ${initialState.primaryEmotion} (${initialState.intensity.toFixed(2)})`);
        console.log(`   Valence : ${initialState.valence.toFixed(2)} (n√©gative)\n`);
    }

    /**
     * Simule une s√©rie d'exercices avec adaptation
     */
    private async simulateAdaptiveExerciseSeries(studentId: string): Promise<void> {
        const exerciseSeries = [
            {
                name: 'Exercice de r√©cup√©ration simple',
                difficulty: 'very_easy',
                adaptation: 'recovery_mode'
            },
            {
                name: 'Exercice motivant',
                difficulty: 'easy',
                adaptation: 'confidence_building'
            },
            {
                name: 'Retour progressif',
                difficulty: 'medium',
                adaptation: 'gradual_increase'
            },
            {
                name: 'Consolidation',
                difficulty: 'medium',
                adaptation: 'stabilization'
            }
        ];

        for (let i = 0; i < exerciseSeries.length; i++) {
            const exercise = exerciseSeries[i];

            console.log(`üéØ ${exercise.name} (${exercise.adaptation})`);

            // Adapter les param√®tres selon l'√©tat √©motionnel actuel
            const currentState = this.emotionalSystem.getCurrentEmotionalState(studentId);
            const adaptedParams = this.adaptExerciseParams(exercise, currentState!);

            const newState = await this.emotionalSystem.generateEmotionalState(studentId, adaptedParams);

            console.log(`   √âtat r√©sultant : ${newState.primaryEmotion} (${newState.intensity.toFixed(2)})`);
            console.log(`   Valence : ${newState.valence.toFixed(2)}`);
            console.log(`   Adaptation efficace : ${this.evaluateAdaptationSuccess(currentState!, newState)}\n`);
        }

        // Analyse finale
        const finalAnalysis = await this.emotionalSystem.performCompleteAnalysis(studentId);
        console.log('üìä Analyse finale :');
        console.log(`   Patterns d√©tect√©s : ${finalAnalysis.patterns.map(p => p.type).join(', ')}`);
        console.log(`   Recommandations : ${finalAnalysis.recommendations[0]}`);
    }

    /**
     * Adapte les param√®tres d'exercice selon l'√©tat √©motionnel
     */
    private adaptExerciseParams(
        exercise: { name: string; difficulty: string; adaptation: string },
        currentState: EmotionalState
    ): EmotionGenerationParams {
        // Adapter l'intensit√© du stimulus selon l'√©tat √©motionnel
        let stimulusIntensity = 0.5;
        let outcome: 'success' | 'partial' | 'failure' = 'success';

        if (currentState.valence < -0.3) {
            // √âtat n√©gatif - exercice de r√©cup√©ration
            stimulusIntensity = 0.3;
            outcome = 'success';
        } else if (currentState.valence > 0.5) {
            // √âtat positif - peut augmenter la difficult√©
            stimulusIntensity = 0.7;
            outcome = Math.random() > 0.2 ? 'success' : 'partial';
        }

        return {
            learningContext: `adaptive_${exercise.adaptation}`,
            stimulus: exercise.name.toLowerCase().replace(/\s+/g, '_'),
            stimulusIntensity,
            learningOutcome: outcome,
            contextualFactors: [exercise.difficulty, exercise.adaptation, 'adaptive_response']
        };
    }

    /**
     * √âvalue le succ√®s de l'adaptation
     */
    private evaluateAdaptationSuccess(previousState: EmotionalState, newState: EmotionalState): string {
        const valenceImprovement = newState.valence - previousState.valence;

        if (valenceImprovement > 0.3) return '‚úÖ Excellente';
        if (valenceImprovement > 0.1) return 'üü¢ Bonne';
        if (valenceImprovement > -0.1) return 'üü° Mod√©r√©e';
        return '‚ùå Insuffisante';
    }
}

/**
 * Exemple 3 : Analyse de groupe et dynamiques sociales
 * 
 * @class GroupDynamicsExample
 * @description Montre comment analyser les dynamiques √©motionnelles
 * dans un groupe d'IA-√©l√®ves.
 */
export class GroupDynamicsExample {
    private readonly emotionalSystem: AIEmotionalSystem;

    constructor() {
        const config = PRESET_CONFIGS.DEFAULT;
        this.emotionalSystem = createEmotionalSystem(config.systemConfig);
    }

    /**
     * D√©montre l'analyse de dynamiques de groupe
     */
    public async demonstrateGroupDynamics(): Promise<void> {
        console.log('\nüë• === EXEMPLE : Dynamiques de Groupe ===\n');

        // Cr√©er un groupe d'√©tudiants
        const groupStudents = await this.createStudentGroup();

        // Simuler une activit√© collaborative
        await this.simulateCollaborativeActivity(groupStudents);

        // Analyser les dynamiques de groupe
        await this.analyzeGroupDynamics(groupStudents);
    }

    /**
     * Cr√©e un groupe d'√©tudiants diversifi√©
     */
    private async createStudentGroup(): Promise<string[]> {
        const students = ['leader', 'follower', 'creative', 'analytical'];

        // G√©n√©rer des √©tats √©motionnels initiaux vari√©s
        for (const studentId of students) {
            const role = studentId;
            const params: EmotionGenerationParams = {
                learningContext: 'group_formation',
                stimulus: `${role}_role_assignment`,
                stimulusIntensity: 0.6,
                learningOutcome: 'success',
                contextualFactors: ['group_work', 'role_based', role]
            };

            await this.emotionalSystem.generateEmotionalState(studentId, params);
        }

        console.log('üë• Groupe d\'√©tudiants cr√©√© avec r√¥les assign√©s\n');
        return students;
    }

    /**
     * Simule une activit√© collaborative
     */
    private async simulateCollaborativeActivity(students: string[]): Promise<void> {
        console.log('ü§ù Simulation : Cr√©ation d\'une histoire en LSF collaborative\n');

        const phases = [
            'Brainstorming initial',
            'D√©veloppement d\'id√©es',
            'Cr√©ation collaborative',
            'Pr√©sentation finale'
        ];

        for (const phase of phases) {
            console.log(`üìå Phase : ${phase}`);

            for (const studentId of students) {
                // Simuler l'interaction selon le r√¥le
                const interaction = this.simulateRoleBasedInteraction(studentId, phase);
                const state = await this.emotionalSystem.generateEmotionalState(studentId, interaction);

                console.log(`   ${studentId.padEnd(10)} : ${state.primaryEmotion} (${state.intensity.toFixed(2)})`);
            }
            console.log('');
        }
    }

    /**
     * Simule l'interaction bas√©e sur le r√¥le
     */
    private simulateRoleBasedInteraction(studentId: string, phase: string): EmotionGenerationParams {
        const roleParams: Record<string, { outcome: 'success' | 'partial' | 'failure', intensity: number }> = {
            'leader': { outcome: 'success', intensity: 0.8 },
            'follower': { outcome: 'success', intensity: 0.6 },
            'creative': { outcome: phase.includes('cr√©ation') ? 'success' : 'partial', intensity: 0.7 },
            'analytical': { outcome: phase.includes('d√©veloppement') ? 'success' : 'partial', intensity: 0.7 }
        };

        const roleData = roleParams[studentId] || { outcome: 'success' as const, intensity: 0.6 };

        return {
            learningContext: 'collaborative_storytelling',
            stimulus: `${phase.toLowerCase().replace(/\s+/g, '_')}_${studentId}`,
            stimulusIntensity: roleData.intensity,
            learningOutcome: roleData.outcome,
            contextualFactors: ['group_work', 'collaborative', phase.toLowerCase(), studentId]
        };
    }

    /**
     * Analyse les dynamiques de groupe
     */
    private async analyzeGroupDynamics(students: string[]): Promise<void> {
        console.log('üìä === ANALYSE DES DYNAMIQUES DE GROUPE ===\n');

        // Analyser chaque √©tudiant individuellement
        const analyses: CompleteEmotionalAnalysis[] = [];
        for (const studentId of students) {
            const analysis = await this.emotionalSystem.performCompleteAnalysis(studentId);
            analyses.push(analysis);

            console.log(`üë§ ${studentId} :`);
            console.log(`   √âtat final : ${analysis.currentState.primaryEmotion}`);
            console.log(`   Valence moyenne : ${this.calculateAverageValence(analysis.recentHistory).toFixed(2)}`);
            console.log(`   Patterns : ${analysis.patterns.map(p => p.type).join(', ') || 'Aucun'}`);
            console.log('');
        }

        // Analyser la coh√©sion du groupe
        this.analyzeGroupCohesion(analyses);

        // Recommandations pour le groupe
        this.provideGroupRecommendations(analyses);
    }

    /**
     * Calcule la valence moyenne de l'historique
     */
    private calculateAverageValence(history: readonly EmotionalState[]): number {
        if (history.length === 0) return 0;
        return history.reduce((sum, state) => sum + state.valence, 0) / history.length;
    }

    /**
     * Analyse la coh√©sion du groupe
     */
    private analyzeGroupCohesion(analyses: readonly CompleteEmotionalAnalysis[]): void {
        console.log('üîó Coh√©sion du groupe :');

        // Calculer la variance des valences
        const valences = analyses.map(a => a.currentState.valence);
        const meanValence = valences.reduce((sum, v) => sum + v, 0) / valences.length;
        const variance = valences.reduce((sum, v) => sum + Math.pow(v - meanValence, 2), 0) / valences.length;
        const cohesion = 1 - Math.sqrt(variance); // Coh√©sion inverse de la variance

        console.log(`   Score de coh√©sion : ${(cohesion * 100).toFixed(0)}%`);
        console.log(`   Valence moyenne : ${meanValence.toFixed(2)}`);
        console.log(`   ${cohesion > 0.7 ? '‚úÖ Groupe coh√©sif' : cohesion > 0.4 ? 'üü° Coh√©sion mod√©r√©e' : '‚ùå Groupe dispers√©'}\n`);
    }

    /**
     * Fournit des recommandations pour le groupe
     */
    private provideGroupRecommendations(analyses: readonly CompleteEmotionalAnalysis[]): void {
        console.log('üí° Recommandations pour le groupe :');

        const negativeStates = analyses.filter(a => a.currentState.valence < -0.2);
        const positiveStates = analyses.filter(a => a.currentState.valence > 0.5);

        if (negativeStates.length > analyses.length / 2) {
            console.log('   1. Activit√© de remotivation collective recommand√©e');
            console.log('   2. R√©duire la difficult√© des prochains exercices');
        }

        if (positiveStates.length === analyses.length) {
            console.log('   1. Excellent √©tat de groupe - augmenter le d√©fi');
            console.log('   2. Consid√©rer des activit√©s de leadership rotatif');
        }

        console.log('   3. Maintenir les activit√©s collaboratives');
        console.log('   4. Surveiller les dynamiques individuelles dans le groupe\n');
    }
}

/**
 * Exemple 4 : Recherche et analytics avanc√©s
 * 
 * @class ResearchAnalyticsExample
 * @description Montre comment utiliser le syst√®me pour la recherche
 * avec analytics d√©taill√©es et export de donn√©es.
 */
export class ResearchAnalyticsExample {
    private readonly emotionalSystem: AIEmotionalSystem;

    constructor() {
        const config = PRESET_CONFIGS.RESEARCH;
        this.emotionalSystem = createEmotionalSystem(config.systemConfig);
    }

    /**
     * D√©montre les capacit√©s de recherche et analytics
     */
    public async demonstrateResearchAnalytics(): Promise<void> {
        console.log('\nüî¨ === EXEMPLE : Recherche et Analytics Avanc√©s ===\n');

        const researchSubject = 'research_subject_001';

        // Simuler une √©tude longitudinale
        await this.simulateLongitudinalStudy(researchSubject);

        // Effectuer des analyses approfondies
        await this.performAdvancedAnalytics(researchSubject);

        // G√©n√©rer des insights de recherche
        await this.generateResearchInsights(researchSubject);
    }

    /**
     * Simule une √©tude longitudinale
     */
    private async simulateLongitudinalStudy(subjectId: string): Promise<void> {
        console.log('üìÖ Simulation : √âtude longitudinale sur 4 semaines\n');

        const weeks = 4;
        const sessionsPerWeek = 3;

        for (let week = 1; week <= weeks; week++) {
            console.log(`üìä Semaine ${week} :`);

            for (let session = 1; session <= sessionsPerWeek; session++) {
                // Simuler une progression r√©aliste
                const progress = ((week - 1) * sessionsPerWeek + session - 1) / (weeks * sessionsPerWeek);
                const params = this.createProgressiveParams(week, session, progress);

                const state = await this.emotionalSystem.generateEmotionalState(subjectId, params);
                console.log(`   Session ${session} : ${state.primaryEmotion} (${state.intensity.toFixed(2)})`);
            }
            console.log('');
        }
    }

    /**
     * Cr√©e des param√®tres progressifs pour l'√©tude
     */
    private createProgressiveParams(
        week: number,
        session: number,
        progress: number
    ): EmotionGenerationParams {
        // Simuler une progression r√©aliste avec hauts et bas
        const basePerformance = Math.min(0.3 + progress * 0.6, 0.9);
        const randomVariation = (Math.random() - 0.5) * 0.4;
        const performance = Math.max(0.1, Math.min(0.9, basePerformance + randomVariation));

        const outcome: 'success' | 'partial' | 'failure' =
            performance > 0.7 ? 'success' :
                performance > 0.4 ? 'partial' : 'failure';

        return {
            learningContext: `longitudinal_study_week_${week}`,
            stimulus: `session_${session}_week_${week}_exercise`,
            stimulusIntensity: 0.5 + progress * 0.3,
            learningOutcome: outcome,
            contextualFactors: [`week_${week}`, `session_${session}`, 'longitudinal_study', `progress_${Math.round(progress * 100)}pct`]
        };
    }

    /**
     * Effectue des analyses approfondies
     */
    private async performAdvancedAnalytics(subjectId: string): Promise<void> {
        console.log('üîç === ANALYSES APPROFONDIES ===\n');

        // Recherche dans l'historique avec crit√®res avanc√©s
        const allHistory = await this.emotionalSystem.searchHistory(subjectId, {});

        console.log(`üìä Donn√©es collect√©es : ${allHistory.totalCount} points de donn√©es\n`);

        // Analyse par semaine
        for (let week = 1; week <= 4; week++) {
            const weekData = await this.emotionalSystem.searchHistory(subjectId, {
                triggers: [`week_${week}`]
            });

            if (weekData.states.length > 0) {
                const avgValence = weekData.states.reduce((sum, s) => sum + s.valence, 0) / weekData.states.length;
                const avgIntensity = weekData.states.reduce((sum, s) => sum + s.intensity, 0) / weekData.states.length;

                console.log(`üìà Semaine ${week} :`);
                console.log(`   Valence moyenne : ${avgValence.toFixed(3)}`);
                console.log(`   Intensit√© moyenne : ${avgIntensity.toFixed(3)}`);
                console.log(`   Progression : ${this.calculateWeeklyProgress(weekData.states)}`);
                console.log('');
            }
        }

        // Analyse compl√®te finale
        const finalAnalysis = await this.emotionalSystem.performCompleteAnalysis(subjectId);
        console.log('üéØ Analyse finale :');
        console.log(`   Patterns d√©tect√©s : ${finalAnalysis.patterns.length}`);
        console.log(`   Confiance globale : ${(finalAnalysis.confidence * 100).toFixed(1)}%`);
        finalAnalysis.patterns.forEach(pattern => {
            console.log(`   - ${pattern.type} : ${pattern.sequence.join(' ‚Üí ')} (confiance: ${(pattern.confidence * 100).toFixed(0)}%)`);
        });
        console.log('');
    }

    /**
     * Calcule la progression hebdomadaire
     */
    private calculateWeeklyProgress(states: readonly EmotionalState[]): string {
        if (states.length < 2) return 'Donn√©es insuffisantes';

        const firstHalf = states.slice(0, Math.floor(states.length / 2));
        const secondHalf = states.slice(Math.floor(states.length / 2));

        const firstAvg = firstHalf.reduce((sum, s) => sum + s.valence, 0) / firstHalf.length;
        const secondAvg = secondHalf.reduce((sum, s) => sum + s.valence, 0) / secondHalf.length;

        const improvement = secondAvg - firstAvg;

        if (improvement > 0.2) return 'üìà Forte am√©lioration';
        if (improvement > 0.05) return 'üìä Am√©lioration mod√©r√©e';
        if (improvement > -0.05) return '‚û°Ô∏è Stable';
        if (improvement > -0.2) return 'üìâ L√©g√®re r√©gression';
        return '‚¨áÔ∏è R√©gression significative';
    }

    /**
     * G√©n√®re des insights de recherche
     */
    private async generateResearchInsights(subjectId: string): Promise<void> {
        console.log('üí° === INSIGHTS DE RECHERCHE ===\n');

        const finalAnalysis = await this.emotionalSystem.performCompleteAnalysis(subjectId);

        // Insights sur les patterns
        if (finalAnalysis.patterns.length > 0) {
            console.log('üîç Insights sur les patterns :');

            const learningCycles = finalAnalysis.patterns.filter(p => p.type === 'learning_cycle');
            if (learningCycles.length > 0) {
                console.log(`   - ${learningCycles.length} cycles d'apprentissage d√©tect√©s`);
                console.log('   - Recommandation : Structurer l\'enseignement selon ces cycles naturels');
            }

            const breakthroughs = finalAnalysis.patterns.filter(p => p.type === 'breakthrough');
            if (breakthroughs.length > 0) {
                console.log(`   - ${breakthroughs.length} moments de r√©v√©lation identifi√©s`);
                console.log('   - Recommandation : Analyser les conditions favorisant ces moments');
            }

            console.log('');
        }

        // Insights sur la progression
        console.log('üìä Insights sur la progression :');
        const history = finalAnalysis.recentHistory;
        if (history.length >= 4) {
            const quarters = [
                history.slice(0, Math.floor(history.length / 4)),
                history.slice(Math.floor(history.length / 4), Math.floor(history.length / 2)),
                history.slice(Math.floor(history.length / 2), Math.floor(3 * history.length / 4)),
                history.slice(Math.floor(3 * history.length / 4))
            ];

            quarters.forEach((quarter, index) => {
                const avgValence = quarter.reduce((sum, s) => sum + s.valence, 0) / quarter.length;
                console.log(`   P√©riode ${index + 1} : ${avgValence.toFixed(3)} (${this.interpretValence(avgValence)})`);
            });
        }

        console.log('\nüéØ Recommandations pour futures √©tudes :');
        finalAnalysis.recommendations.forEach((rec, index) => {
            console.log(`   ${index + 1}. ${rec}`);
        });

        console.log('\nüìÑ Rapport complet g√©n√©r√© pour publication scientifique');
    }

    /**
     * Interpr√®te une valence pour les insights
     */
    private interpretValence(valence: number): string {
        if (valence > 0.5) return '√âtat tr√®s positif';
        if (valence > 0.2) return '√âtat positif';
        if (valence > -0.2) return '√âtat neutre';
        if (valence > -0.5) return '√âtat n√©gatif';
        return '√âtat tr√®s n√©gatif';
    }
}

/**
 * Ex√©cuteur principal des exemples
 * 
 * @class ExampleRunner
 * @description Classe principale pour ex√©cuter tous les exemples
 * de mani√®re s√©quentielle ou s√©lective.
 */
export class ExampleRunner {
    /**
     * Ex√©cute tous les exemples
     */
    public static async runAllExamples(): Promise<void> {
        console.log('üöÄ ===== EXEMPLES SYST√àME √âMOTIONNEL METASIGN =====\n');

        try {
            // Exemple 1 : Cours LSF complet
            const courseExample = new LSFCourseIntegrationExample();
            await courseExample.demonstrateCompleteLSFCourse();

            // Exemple 2 : Adaptation temps r√©el
            const realtimeExample = new RealTimeAdaptationExample();
            await realtimeExample.demonstrateRealTimeAdaptation();

            // Exemple 3 : Dynamiques de groupe
            const groupExample = new GroupDynamicsExample();
            await groupExample.demonstrateGroupDynamics();

            // Exemple 4 : Recherche et analytics
            const researchExample = new ResearchAnalyticsExample();
            await researchExample.demonstrateResearchAnalytics();

            console.log('‚úÖ Tous les exemples ex√©cut√©s avec succ√®s !');
            console.log('\nüìö Consultez la documentation compl√®te pour plus d\'informations.');

        } catch (error) {
            console.error('‚ùå Erreur lors de l\'ex√©cution des exemples :', error);
        }
    }

    /**
     * Ex√©cute un exemple sp√©cifique
     */
    public static async runSpecificExample(exampleName: string): Promise<void> {
        switch (exampleName.toLowerCase()) {
            case 'course':
            case 'cours':
                const courseExample = new LSFCourseIntegrationExample();
                await courseExample.demonstrateCompleteLSFCourse();
                break;

            case 'realtime':
            case 'adaptation':
                const realtimeExample = new RealTimeAdaptationExample();
                await realtimeExample.demonstrateRealTimeAdaptation();
                break;

            case 'group':
            case 'groupe':
                const groupExample = new GroupDynamicsExample();
                await groupExample.demonstrateGroupDynamics();
                break;

            case 'research':
            case 'recherche':
                const researchExample = new ResearchAnalyticsExample();
                await researchExample.demonstrateResearchAnalytics();
                break;

            default:
                console.log('‚ùå Exemple non reconnu. Exemples disponibles :');
                console.log('   - course : Int√©gration cours LSF');
                console.log('   - realtime : Adaptation temps r√©el');
                console.log('   - group : Dynamiques de groupe');
                console.log('   - research : Recherche et analytics');
        }
    }
}

// Export pour utilisation dans d'autres modules
export const EXAMPLES = {
    LSFCourseIntegrationExample,
    RealTimeAdaptationExample,
    GroupDynamicsExample,
    ResearchAnalyticsExample,
    ExampleRunner
} as const;